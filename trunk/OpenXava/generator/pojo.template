#declare import="org.openxava.util.Strings"#
#declare import="org.openxava.util.XavaException"#
#declare import="org.openxava.util.meta.MetaSet"#
#declare import="org.openxava.component.MetaComponent"#
#declare import="org.openxava.model.meta.*"#
#declare import="org.openxava.calculators.*"#
#declare import="org.openxava.generators.*"#
#declare import="org.openxava.mapping.*"#


# 
String packageName = properties.getProperty("arg3");
String componentName = properties.getProperty("arg4");
String aggregateName = properties.getProperty("arg5");
MetaComponent component = MetaComponent.get(componentName);

String name=null;
IMetaModel metaModel=null;
if (aggregateName == null) {
	name=componentName;	
	metaModel = (IMetaModel) component.getMetaEntity();
}
else {
	name=aggregateName;	
	metaModel =  (IMetaEjb)component.getMetaAggregate(aggregateName);
}


#
// File generated by OpenXava: #(new Date())#
// Archivo generado por OpenXava: #(new Date())#

// WARNING: NO EDIT
// OJO: NO EDITAR


# if (aggregateName == null) { #
// Component: #(componentName)#		Entity/Entidad
# } else { #
// Component: #(componentName)#		Aggregate/Agregado: #(aggregateName)#
# } #

package #(packageName)#;

import java.util.*;
import java.math.*;
import java.rmi.RemoteException;
import org.openxava.component.MetaComponent;
import org.openxava.model.meta.MetaModel;
import org.openxava.util.*;

/**
 * 
 * @author MCarmen Gimeno
 */
public class #(name)# implements java.io.Serializable, #(metaModel.getInterfaceName())# {	
	
	// Properties/Propiedades
	
# 
Iterator itProperties = metaModel.getMetaProperties().iterator();	
while (itProperties.hasNext()) {	
	MetaProperty property = (MetaProperty) itProperties.next();
	PropertyPG.generate(context, out, property); 
}
# 

	// References/Referencias
	
# 
Iterator itReferences = metaModel.getMetaReferences().iterator();	
while (itReferences.hasNext()) {	
	MetaReference ref = (MetaReference) itReferences.next();
	if (ref.getMetaModelReferenced() instanceof MetaAggregateBean) {
		AggregateReferencePG.generate(context, out, ref); 
	}
	else {
		EntityReferencePG.generate(context, out, ref); 
	}
}
# 

	// Colecciones/Collections
	
# 
Iterator itCollections = metaModel.getMetaCollections().iterator();	
while (itCollections.hasNext()) {	
	MetaCollection col = (MetaCollection) itCollections.next();
	String colName = Strings.firstUpper(col.getName());
	MetaReference reference = col.getMetaReference();
	String colType = reference.getMetaModelReferenced().getInterfaceName();
	String roleName = Strings.firstUpper(reference.getRole());
	# 
	private java.util.Collection #(col.getName())#;
	public java.util.Collection get#(colName)#() {
		return #(col.getName())#;
	}
	public void set#(colName)#(java.util.Collection #(col.getName())#) {
		this.#(col.getName())# = #(col.getName())#;
	}
	
# 
	if (!reference.isAggregate() && 
		!col.hasCondition() && 
		!col.hasCalculator() && 
		!reference.getMetaModelReferenced().getMetaReference(reference.getRole()).isKey()) { 
# 
	
	public void addTo#(colName)#(#(colType)# newElement) throws RemoteException {
		this.get#(colName)#().add(newElement);
		newElement.set#(roleName)#(this);
	}
	public void removeFrom#(colName)#(#(colType)# toRemove) throws RemoteException {
		this.get#(colName)#().remove(toRemove);
		toRemove.set#(roleName)#(null);
	}
# 
	}
# 

# 
}
# 

# 	
	MethodsPG.generate(context, out, metaModel); 
# 	

	private MetaModel metaModel;
	public MetaModel getMetaModel() throws XavaException {
		if (metaModel == null) {
		# if (aggregateName == null) { #
			metaModel = MetaComponent.get("#(componentName)#").getMetaEntity();
		# } else { # 
			metaModel = MetaComponent.get("#(componentName)#").getMetaAggregate("#(aggregateName)#");
		# } # 	
		}
		return metaModel;
	}
	
	public String toString() {		
	# 
		StringBuffer string = new StringBuffer();
		string.append('"');
		string.append(name);
		Collection metaProperties = metaModel.getMetaPropertiesKey();
		Iterator itKeys = metaProperties.iterator();	
		while (itKeys.hasNext()) {	
			MetaProperty key = (MetaProperty) itKeys.next();
			PropertyMapping pMapping = key.getMapping();
			String atributeName = pMapping.hasConverter()?"_"+key.getName():key.getName();	
			string.append("::");
			string.append('"');
			string.append(" + ");
			string.append(atributeName);
			if (itKeys.hasNext()) {
   				string.append(" + ");
   				string.append('"');
			}
		}
		
		if (metaProperties.isEmpty()) {
			string.append("::");
			string.append('"');
		}
		
		itKeys = metaModel.getKeyReferencesNames().iterator();	
		if (itKeys.hasNext() && !metaProperties.isEmpty()) {
			string.append(" + ");
			string.append('"');
		}	
		while (itKeys.hasNext()) {	
			String key = (String) itKeys.next();
			if (!metaProperties.isEmpty()) {
				string.append("::");
				string.append('"');
			}	
			string.append(" + ");
			string.append(key);
			if (itKeys.hasNext()) {
   				string.append(" + ");
   				string.append('"');
			}
		}
		
	# 
		return #(string)#;
	}

	public boolean equals(Object other) {		
		if (other == null) return false;
		return toString().equals(other.toString());
	}
	
	public int hashCode() {		
		return toString().hashCode();
	}
	
}

