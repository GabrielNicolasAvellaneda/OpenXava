#declare import="org.openxava.util.Strings"#
#declare import="org.openxava.util.XavaException"#
#declare import="org.openxava.util.meta.MetaSet"#
#declare import="org.openxava.component.MetaComponent"#
#declare import="org.openxava.model.meta.*"#
#declare import="org.openxava.calculators.*"#
#declare import="org.openxava.generators.*"#


# 
String packageName = properties.getProperty("arg3");
String componentName = properties.getProperty("arg4");
String aggregateName = properties.getProperty("arg5");
MetaComponent component = MetaComponent.get(componentName);

String name=null;
IMetaModel metaModel=null;
if (aggregateName == null) {
	name=componentName;	
	metaModel = (IMetaModel) component.getMetaEntity();
}
else {
	name=aggregateName;	
	metaModel =  (IMetaEjb)component.getMetaAggregate(aggregateName);
}


#
// File generated by OpenXava: #(new Date())#
// Archivo generado por OpenXava: #(new Date())#

// WARNING: NO EDIT
// OJO: NO EDITAR


# if (aggregateName == null) { #
// Component: #(componentName)#		Entity/Entidad
# } else { #
// Component: #(componentName)#		Aggregate/Agregado: #(aggregateName)#
# } #

package #(packageName)#;

import java.util.*;
import org.openxava.component.MetaComponent;
import org.openxava.model.meta.MetaModel;
import org.openxava.util.*;

/**
 * 
 * @author MCarmen Gimeno
 */
public class #(name)# implements java.io.Serializable {	
	
	// Properties/Propiedades
	
# 
Iterator itProperties = metaModel.getMetaProperties().iterator();	
while (itProperties.hasNext()) {	
	MetaProperty property = (MetaProperty) itProperties.next();
	PropertyPG.generate(context, out, property); 
}
# 

	// References/Referencias
	
# 
Iterator itReferences = metaModel.getMetaReferences().iterator();	
while (itReferences.hasNext()) {	
	MetaReference ref = (MetaReference) itReferences.next();
	if (ref.getMetaModelReferenced() instanceof MetaAggregateBean) {
		AggregateReferencePG.generate(context, out, ref); 
	}
	else {
		String refName = Strings.firstUpper(ref.getName());
	# 
	private #(ref.getReferencedModelName())# #(ref.getName())#;
	public #(ref.getReferencedModelName())# get#(refName)#() {
		return #(ref.getName())#;
	}
	public void set#(refName)#(#(ref.getReferencedModelName())# new#(ref.getReferencedModelName())#) {
		this.#(ref.getName())# = new#(ref.getReferencedModelName())#;
	}	
	# 
	}
}
# 

	// Colecciones/Collections
	
# 
Iterator itCollections = metaModel.getMetaCollections().iterator();	
while (itCollections.hasNext()) {	
	MetaCollection col = (MetaCollection) itCollections.next();
	String colName = Strings.firstUpper(col.getName());
	# 
	private java.util.Collection #(col.getName())#;
	public java.util.Collection get#(colName)#() {
		return #(col.getName())#;
	}
	# 
}
# 
	
	private MetaModel metaModel;
	private MetaModel getMetaModel() throws XavaException {
		if (metaModel == null) {
		# if (aggregateName == null) { #
			metaModel = MetaComponent.get("#(componentName)#").getMetaEntity();
		# } else { # 
			metaModel = MetaComponent.get("#(componentName)#").getMetaAggregate("#(aggregateName)#");
		# } # 	
		}
		return metaModel;
	}
}

