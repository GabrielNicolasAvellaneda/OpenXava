<?xml version="1.0"?>
<tl><declare import="org.openxava.util.Strings"/>
<declare import="org.openxava.util.XavaException"/>
<declare import="org.openxava.util.meta.MetaSet"/>
<declare import="org.openxava.component.MetaComponent"/>
<declare import="org.openxava.model.meta.*"/>
<declare import="org.openxava.calculators.*"/>
<declare import="org.openxava.generators.*"/>
<declare import="org.openxava.mapping.*"/>


<java>
String packageName = properties.getProperty("arg3");
String componentName = properties.getProperty("arg4");
String aggregateName = properties.getProperty("arg5");
MetaComponent component = MetaComponent.get(componentName);

String name=null;
IMetaModel metaModel=null;
if (aggregateName == null) {
	name=componentName;	
	metaModel = (IMetaModel) component.getMetaEntity();
}
else {
	name=aggregateName;	
	metaModel =  (IMetaEjb)component.getMetaAggregate(aggregateName);
}


</java>
// File generated by OpenXava: <expr>new Date()</expr>
// Archivo generado por OpenXava: <expr>new Date()</expr>

// WARNING: NO EDIT
// OJO: NO EDITAR


<java>if (aggregateName == null) { </java>
// Component: <expr>componentName</expr>		Entity/Entidad
<java>} else { </java>
// Component: <expr>componentName</expr>		Aggregate/Agregado: <expr>aggregateName</expr>
<java>} </java>

package <expr>packageName</expr>;

import java.util.*;
import org.openxava.component.MetaComponent;
import org.openxava.model.meta.MetaModel;
import org.openxava.util.*;

/**
 * 
 * @author MCarmen Gimeno
 */
public class <expr>name</expr> implements java.io.Serializable {	
	
	// Properties/Propiedades
	
<java>
Iterator itProperties = metaModel.getMetaProperties().iterator();	
while (itProperties.hasNext()) {	
	MetaProperty property = (MetaProperty) itProperties.next();
	PropertyPG.generate(context, out, property); 
}
</java> 

	// References/Referencias
	
<java>
Iterator itReferences = metaModel.getMetaReferences().iterator();	
while (itReferences.hasNext()) {	
	MetaReference ref = (MetaReference) itReferences.next();
	if (ref.getMetaModelReferenced() instanceof MetaAggregateBean) {
		AggregateReferencePG.generate(context, out, ref); 
	}
	else {
		EntityReferencePG.generate(context, out, ref); 
	}
}
</java> 

	// Colecciones/Collections
	
<java>
Iterator itCollections = metaModel.getMetaCollections().iterator();	
while (itCollections.hasNext()) {	
	MetaCollection col = (MetaCollection) itCollections.next();
	String colName = Strings.firstUpper(col.getName());
	</java> 
	private java.util.Collection <expr>col.getName()</expr>;
	public java.util.Collection get<expr>colName</expr>() {
		return <expr>col.getName()</expr>;
	}
	public void set<expr>colName</expr>(java.util.Collection <expr>col.getName()</expr>) {
		this.<expr>col.getName()</expr> = <expr>col.getName()</expr>;
	}
	<java>
}
</java> 
	
	private MetaModel metaModel;
	private MetaModel getMetaModel() throws XavaException {
		if (metaModel == null) {
		<java>if (aggregateName == null) { </java>
			metaModel = MetaComponent.get("<expr>componentName</expr>").getMetaEntity();
		<java>} else { </java> 
			metaModel = MetaComponent.get("<expr>componentName</expr>").getMetaAggregate("<expr>aggregateName</expr>");
		<java>} </java> 	
		}
		return metaModel;
	}
	
	public String toString() {		
	<java>
		StringBuffer string = new StringBuffer();
		string.append('"');
		string.append(name);
		Collection metaProperties = metaModel.getMetaPropertiesKey();
		Iterator itKeys = metaProperties.iterator();	
		while (itKeys.hasNext()) {	
			MetaProperty key = (MetaProperty) itKeys.next();
			PropertyMapping pMapping = key.getMapping();
			String atributeName = pMapping.hasConverter()?"_"+key.getName():key.getName();	
			string.append("::");
			string.append('"');
			string.append(" + ");
			string.append(atributeName);
			if (itKeys.hasNext()) {
   				string.append(" + ");
   				string.append('"');
			}
		}
		
		if (metaProperties.isEmpty()) {
			string.append("::");
			string.append('"');
		}
		
		itKeys = metaModel.getKeyReferencesNames().iterator();	
		if (itKeys.hasNext() &amp;&amp; !metaProperties.isEmpty()) {
			string.append(" + ");
			string.append('"');
		}	
		while (itKeys.hasNext()) {	
			String key = (String) itKeys.next();
			if (!metaProperties.isEmpty()) {
				string.append("::");
				string.append('"');
			}	
			string.append(" + ");
			string.append(key);
			if (itKeys.hasNext()) {
   				string.append(" + ");
   				string.append('"');
			}
		}
		
	</java> 
		return <expr>string</expr>;
	}

	public boolean equals(Object other) {		
		if (other == null) return false;
		return toString().equals(other.toString());
	}
	
	public int hashCode() {		
		return toString().hashCode();
	}
	
}

</tl>