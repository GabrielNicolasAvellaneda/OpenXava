<?xml version="1.0"?>

<!-- OpenXava -->

<project name="OpenXava" default="deployWar">

	<property name="default.language" value="en"/>
	<property name="datasource" value="DataSource"/>
	<property name="datasource.prefix" value="java:"/>
	<property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>
	<property name="dist.base.dir" value = ".."/>
	<property name="dist.dir" value = "${dist.base.dir}/${project}.dist"/>
	<property name="dist.portlets.dir" value = "${dist.base.dir}/${project}-portlets.war.d"/>
	<property name="file.ear" value = "${project}.ear"/>	
	<property name="xava.lib" value="../OpenXava/bin"/>	
	<property name="j2ee.lib" location="../OpenXava/lib/j2ee.jar"/>
	<property name="tl.lib" location="../OpenXava/lib/tl.jar"/>
	<property name="components.dir" value="../${project}/components"/>
	<property name="generator.dir" value="${workspace.dir}/OpenXava/generator"/>
	<property name="tracking.classes" value="../AccessTracking/web/WEB-INF/classes;../OpenXava/web/WEB-INF/lib/hibernate3.jar"/>
	<property name="subcontext" value="${project}"/>				
	<property name="classes.dir" value="web/WEB-INF/classes"/>
	<property name="name.war" value="${project}"/>	
	<property name="jboss.mapping.xml" value="jaws.xml"/>
	<property name="openxavads.separator" value="_"/>
	<property name="openxavads.hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>
	<property name="separator" value="."/>
	<property name="meta-inf.dir" value="build/ejb/META-INF"/>
	<property name="project.ejb" value = "${project}"/>
	<property name="name.jar" value = "${project.ejb}"/>
    <property name="server.properties.dir" value="../OpenXava/build/server-properties"/>
    <property name="server.properties.tmp.dir" value="${user.home}/tmpServerProperties"/>        
	<property name="model.package" value="model"/>
	<property name="build.compiler" value="javac1.3"/>
	<property name="deploy.portlets.dir" value="${deploy.dir}/openxava.war/WEB-INF/deploy"/>
	<property name="generate.jetspeed2.files" value="true"/>
	<property name="jetspeed2.pages.dir" value="${deploy.dir}/openxava.war/WEB-INF/pages"/>
			
   <!-- Set up java.class.path -->
   <path id="project.class.path">
   
	  <pathelement path="${tl.dir}" />   
   
      <!-- LOG4J properties -->
      <pathelement path="${basedir}" />

      <!-- append the external classpath lastly -->
      <pathelement path="${java.class.path}" />

   </path>	
	
	<target name="init">
		<tstamp/>
		<available file="../${project.ejb}/${meta-inf.dir}/jbosscmp-jdbc.xml" 
			property="jboss.mapping.xml" value="jbosscmp-jdbc.xml"/>
	</target>
	
	<target name="initPortlets">
		<uptodate property="regenerate.portlet.xml.notRequired"
			targetfile="../${project.ejb}/web/WEB-INF/portlet.xml">
			<srcfiles file="../${project.ejb}/xava/application.xml"/>
			<srcfiles file="../${project.ejb}/xava/aplicacion.xml"/>			
		</uptodate>
	</target>
	
	
	<target name="createDist">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/lib"/>
	</target>
		
    <target name="copyDTDs">     
    
		<copy todir="../${project}/xava/dtds" overwrite="true">
			<fileset dir="../OpenXava/xava/dtds" excludes="componente.dtd,component.dtd"/>
		</copy>
		
		<copy todir="../${project}/components/dtds" overwrite="true">
			<fileset dir="../OpenXava/xava/dtds" includes="componente.dtd,component.dtd"/>
		</copy>
		    
	</target>
	
	<target name="filterXavaFilesWithoutConfiguration" unless="configuration">
		<!-- to replace within xava files -->
		<copy todir="../${project.ejb}/${classes.dir}" overwrite="yes">		
			<fileset dir="../${project.ejb}/xava"/>
	    	<filterset>	    	
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset> 			         
		</copy>			
		<!-- to replace within xava components -->
		<copy todir="../${project.ejb}/${classes.dir}" overwrite="yes">		
			<fileset dir="../${project.ejb}/components"/>
	    	<filterset>	    	
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
	    		<filter token="access.table" value="${access.table}"/>
			</filterset> 			         
		</copy>				
	</target>
    
    	
	<target name="filterXavaFilesWithConfiguration" if="configuration">
		<!-- to replace within xava files -->
		<copy todir="../${project.ejb}/${classes.dir}" overwrite="yes">		
			<fileset dir="../${project.ejb}/xava"/>
	    	<filterset>	    	
				<filtersfile file="${configuration}.properties"/>				
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>	    		
			</filterset> 			         
		</copy>			
		<!-- to replace within xava components -->
		<copy todir="../${project.ejb}/${classes.dir}" overwrite="yes">		
			<fileset dir="../${project.ejb}/components"/>
	    	<filterset>	    	
				<filtersfile file="${configuration}.properties"/>				
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
	    		<filter token="access.table" value="${access.table}"/>	    		
			</filterset> 			         
		</copy>				
	</target>
	
	<target name="filterXavaFiles" depends="copyDTDs">
		<antcall target="filterXavaFilesWithConfiguration"/>
		<antcall target="filterXavaFilesWithoutConfiguration"/>
	</target>
	
	<target name="filterHibernateFilesWithoutConfiguration" unless="configuration">
		<copy todir="../${project.ejb}/${classes.dir}" overwrite="yes" failonerror="false">		
			<fileset dir="../OpenXava/hibernate"/>
			<fileset dir="../${project.ejb}/hibernate"/>			
			<fileset dir="../${project.ejb}/build/hibernate"/>
	    	<filterset>	    		    		
				<filter token="separator" value="${separator}"/>
	    		<filter token="openxavads.separator" value="${openxavads.separator}"/>
	    		<filter token="openxavads.hibernate.dialect" value="${openxavads.hibernate.dialect}"/>
				<filter token="collection" value="${collection}"/>
	    		<filter token="datasource" value="${datasource}"/>
	    		<filter token="datasource.prefix" value="${datasource.prefix}"/>
	    		<filter token="hibernate.dialect" value="${hibernate.dialect}"/>
			</filterset> 			         
		</copy>			
	</target>	
	
	<target name="filterHibernateFilesWithConfiguration" if="configuration">
		<copy todir="../${project.ejb}/${classes.dir}" overwrite="yes" failonerror="false">		
			<fileset dir="../OpenXava/hibernate"/>
			<fileset dir="../${project.ejb}/hibernate"/>
			<fileset dir="../${project.ejb}/build/hibernate"/>
	    	<filterset>	    	
				<filtersfile file="${configuration}.properties"/>				
				<filter token="separator" value="${separator}"/>
	    		<filter token="openxavads.separator" value="${openxavads.separator}"/>
	    		<filter token="openxavads.hibernate.dialect" value="${openxavads.hibernate.dialect}"/>
				<filter token="collection" value="${collection}"/>
	    		<filter token="datasource" value="${datasource}"/>
	    		<filter token="datasource.prefix" value="${datasource.prefix}"/>
	    		<filter token="hibernate.dialect" value="${hibernate.dialect}"/>	    		
			</filterset> 			         
		</copy>			
	</target>
		
	<target name="filterHibernateFiles" depends="copyDTDs">
		<antcall target="filterHibernateFilesWithConfiguration"/>
		<antcall target="filterHibernateFilesWithoutConfiguration"/>
	</target>
			
	<target name="regenerateWebsphereMapping">
		<echo>Generating xml template for Websphere Mapping</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/websphereDbxmi.template"/> 
			<arg value="${generator.dir}/websphereDbxmi.xml"/>         
		</java>				
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/websphereSchxmi.template"/> 
			<arg value="${generator.dir}/websphereSchxmi.xml"/>         
		</java>						
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/websphereTblxmi.template"/> 
			<arg value="${generator.dir}/websphereTblxmi.xml"/>         
		</java>								
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/websphereMapxmi.template"/> 
			<arg value="${generator.dir}/websphereMapxmi.xml"/>         
		</java>										
		<echo>Generating Websphere Mapping classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/websphereDbxmi.xml"/>
			<arg value="${generator.dir}/WebsphereDbxmiPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/websphereSchxmi.xml"/>
			<arg value="${generator.dir}/WebsphereSchxmiPG.java"/>
		</java>		
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/websphereTblxmi.xml"/>
			<arg value="${generator.dir}/WebsphereTblxmiPG.java"/>
		</java>				
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/websphereMapxmi.xml"/>
			<arg value="${generator.dir}/WebsphereMapxmiPG.java"/>
		</java>						
		<echo>Compiling classes generators</echo>
		<javac srcdir="${generator.dir}"
			destdir="${generator.dir}"
			classpath="${tl.lib};${xava.lib};${j2ee.lib}"
		/>
		
		<antcall target="generateWebsphereMapping"/>
	</target>
	
	<target name="generateWebsphereMapping" depends="filterXavaFiles">
		<delete file="../${project}/gen-src-xava/dnas.properties"/>
		<echo>Generating Websphere Mapping</echo>		
		<java 
			classname="WebsphereCodeGenerator" 
			classpath="${generator.dir};${tl.lib};${xava.lib};${j2ee.lib};${components.dir};../${project}/${classes.dir};${xava.generator.path}" 
			fork="yes">
			<arg value="${project}"/>        		
	       	<arg value="${domain}"/>
       		<arg value="${package}"/>
	       	<arg value="${model.package}"/>       	
		</java>		
	</target>
	        
	<target name="regenerateGenerator">    
		<echo>Generating xml template for EJB</echo>
       <java classname="Simple2XML" classpath="${tl.lib}">
         <arg value="${generator.dir}/calculators.template"/> 
         <arg value="${generator.dir}/calculators.xml"/>         
       </java>		       		
       <java classname="Simple2XML" classpath="${tl.lib}">
         <arg value="${generator.dir}/property.template"/> 
         <arg value="${generator.dir}/property.xml"/>         
       </java>		
       <java classname="Simple2XML" classpath="${tl.lib}">
         <arg value="${generator.dir}/entityReference.template"/> 
         <arg value="${generator.dir}/entityReference.xml"/>         
       </java>
		<java classname="Simple2XML" classpath="${tl.lib}">
		  <arg value="${generator.dir}/entityReferenceEJB.template"/> 
		  <arg value="${generator.dir}/entityReferenceEJB.xml"/>         
		</java>
       <java classname="Simple2XML" classpath="${tl.lib}">
         <arg value="${generator.dir}/aggregateReference.template"/> 
         <arg value="${generator.dir}/aggregateReference.xml"/>         
       </java>	
		<java classname="Simple2XML" classpath="${tl.lib}">
		 <arg value="${generator.dir}/methods.template"/> 
		 <arg value="${generator.dir}/methods.xml"/>         
		</java>	
       	<java classname="Simple2XML" classpath="${tl.lib}">
        	<arg value="${generator.dir}/ejbean.template"/> 
         	<arg value="${generator.dir}/ejbean.xml"/>         
      	</java>
		<echo>Generating xml template for POJO</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/pojo.template"/> 
			<arg value="${generator.dir}/pojo.xml"/>         
		</java>		
  		<echo>Generating xml template for JavaBean</echo>
       <java classname="Simple2XML" classpath="${tl.lib}">
         <arg value="${generator.dir}/bean.template"/> 
         <arg value="${generator.dir}/bean.xml"/>         
       </java>
  		<echo>Generating xml template for interface</echo>
       <java classname="Simple2XML" classpath="${tl.lib}">
         <arg value="${generator.dir}/interface.template"/> 
         <arg value="${generator.dir}/interface.xml"/>         
       </java>       
		<echo>Generating xml template for hibernate mapping</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/hibernate.template"/> 
			<arg value="${generator.dir}/hibernate.xml"/>         
		</java> 
		
       <echo>Generating EJB classes generator</echo>
        <java classname="TL2Java" classpath="${tl.lib}" fork="yes">
          <arg value="${generator.dir}/calculators.xml"/>
          <arg value="${generator.dir}/CalculatorsPG.java"/>
        </java>		
       <java classname="TL2Java" classpath="${tl.lib}" fork="yes">
         <arg value="${generator.dir}/property.xml"/> 
         <arg value="${generator.dir}/PropertyPG.java"/>         
       </java>        
	   <java classname="TL2Java" classpath="${tl.lib}" fork="yes">
	     <arg value="${generator.dir}/entityReference.xml"/> 
	     <arg value="${generator.dir}/EntityReferencePG.java"/>         
	   </java>  		
	   <java classname="TL2Java" classpath="${tl.lib}" fork="yes">
	     <arg value="${generator.dir}/entityReferenceEJB.xml"/> 
	     <arg value="${generator.dir}/EntityReferenceEJBPG.java"/>         
	   </java>  		
       <java classname="TL2Java" classpath="${tl.lib}" fork="yes">
         <arg value="${generator.dir}/aggregateReference.xml"/> 
         <arg value="${generator.dir}/AggregateReferencePG.java"/>         
       </java>  
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/methods.xml"/> 
			<arg value="${generator.dir}/MethodsPG.java"/>         
		</java>  	
       <java classname="TL2Java" classpath="${tl.lib}" fork="yes">
         <arg value="${generator.dir}/ejbean.xml"/> 
         <arg value="${generator.dir}/EJBeanPG.java"/>         
       </java>
		<echo>Generating POJO classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/pojo.xml"/> 
			<arg value="${generator.dir}/PojoPG.java"/>         
		</java>
       <echo>Generating JavaBean classes generator</echo>
       <java classname="TL2Java" classpath="${tl.lib}" fork="yes">
         <arg value="${generator.dir}/bean.xml"/> 
         <arg value="${generator.dir}/BeanPG.java"/>         
       </java>
       <echo>Generating Interfaz classes generator</echo>
       <java classname="TL2Java" classpath="${tl.lib}" fork="yes">
         <arg value="${generator.dir}/interface.xml"/> 
         <arg value="${generator.dir}/InterfacePG.java"/>         
       </java>
		<echo>Generating hibernate mapping classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/hibernate.xml"/> 
			<arg value="${generator.dir}/HibernatePG.java"/>         
		</java>       
		
       <echo>Compiling classes generators</echo>
	   <javac srcdir="${generator.dir}"
	         destdir="${generator.dir}"
	         classpath="${tl.lib};${xava.lib};${j2ee.lib}"
    	/>	 	    		
		
		<delete file="../${project}/gen-src-xava/dnas.properties"/>
    </target>        
	
    <target name="generateXDoclet">         	
	   <echo>Generating classes</echo>    	
       <java 
       		classname="EJBCodeGenerator" 
       		classpath="${generator.dir};${tl.lib};${xava.lib};${j2ee.lib};${components.dir};../${project}/${classes.dir};${tracking.classes};${xava.generator.path}" 
       		fork="yes">
			<arg value="${project}"/>        		
	       	<arg value="${domain}"/>
       		<arg value="${package}"/>
	       	<arg value="${model.package}"/>       	
		</java>
    </target>
	
    <target name="generateHibernate">     
    	
	   <echo>Generating classes</echo>
    	<delete file="../${project}/gen-src-xava/dnas.properties"/>
       <java 
       		classname="HCodeGenerator" 
       		classpath="${generator.dir};${tl.lib};${xava.lib};${j2ee.lib};${components.dir};../${project}/${classes.dir};${xava.generator.path}" 
       		fork="yes">
			<arg value="${project}"/>        		
	       	<arg value="${domain}"/>
       		<arg value="${package}"/>
	       	<arg value="${model.package}"/>       	
		</java>
    	
    </target>
		
	<target name="runXDoclet">
    	<ant antfile="../OpenXava/xdoclet/build.xml"/>    			
	</target>
	        
    <target name="generateEJB" depends="generateXDoclet">         	
    	<antcall target="runXDoclet"/>
    </target>
		
    <target name="regenerateEJB">    
    	<delete>
   			<fileset dir="../${project}/gen-src"/>
   			<fileset dir="../${project}/gen-src-xava"/>
    		<fileset dir="../${project}/${meta-inf.dir}" excludes="MANIFEST.MF"/>
   		</delete>
		<antcall target="generateEJB"/>
    </target>
		
	<target name="filterWithoutConfiguration" unless="configuration" 
		depends="init">
		<copy file="../${project.ejb}/${meta-inf.dir}/ejb-jar.xml" 
			toFile="../${project.ejb}/${classes.dir}/META-INF/ejb-jar.xml" 
			overwrite="yes">
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<copy file="../${project.ejb}/${meta-inf.dir}/jboss.xml" 
			toFile="../${project.ejb}/${classes.dir}/META-INF/jboss.xml" 
			overwrite="yes">
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy file="../${project.ejb}/${meta-inf.dir}/${jboss.mapping.xml}" 
			toFile="../${project.ejb}/${classes.dir}/META-INF/${jboss.mapping.xml}" 
			overwrite="yes">
			<filterset>
				<filter token="datasource" value="${datasource}"/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<copy file="../${project.ejb}/${meta-inf.dir}/ibm-ejb-jar-bnd.xmi" 
			toFile="../${project.ejb}/${classes.dir}/META-INF/ibm-ejb-jar-bnd.xmi" 
			overwrite="yes" failonerror="no">
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy todir="../${project.ejb}/${classes.dir}/META-INF/backends" 
			overwrite="yes" failonerror="no">
			<fileset dir="../${project.ejb}/${meta-inf.dir}/backends"/>
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>				
			</filterset>
		</copy>						
	</target>
	
	<target name="filterWithConfiguration" if="configuration" 
		depends="init">
		<copy file="../${project.ejb}/${meta-inf.dir}/ejb-jar.xml" 
			toFile="../${project.ejb}/${classes.dir}/META-INF/ejb-jar.xml" 
			overwrite="yes">
			<filterset>				
				<filtersfile file="${configuration}.properties"/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<copy file="../${project.ejb}/${meta-inf.dir}/jboss.xml" 
			toFile="../${project.ejb}/${classes.dir}/META-INF/jboss.xml" 
			overwrite="yes">
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>				
			</filterset>
		</copy>
		<copy file="../${project.ejb}/${meta-inf.dir}/${jboss.mapping.xml}" 
			toFile="../${project.ejb}/${classes.dir}/META-INF/${jboss.mapping.xml}" 
			overwrite="yes">
			<filterset>
				<filtersfile file="${configuration}.properties"/>				
				<filter token="datasource" value="${datasource}"/>
				<filter token="separator" value="${separator}"/>				
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<copy file="../${project.ejb}/${meta-inf.dir}/ibm-ejb-jar-bnd.xmi" 
			toFile="../${project.ejb}/${classes.dir}/META-INF/ibm-ejb-jar-bnd.xmi" 
			overwrite="yes" failonerror="no">
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>				
			</filterset>
		</copy>		
		<copy todir="../${project.ejb}/${classes.dir}/META-INF/backends" 
			overwrite="yes" failonerror="no">
			<fileset dir="../${project.ejb}/${meta-inf.dir}/backends"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>				
			</filterset>
		</copy>				
	</target>
	
	<target name="configureJNDI" if="jndi.conf">
		<copy file="../${project.ejb}/properties/jndi-${jndi.conf}.properties" 
			tofile="../${project.ejb}/properties/jndi.properties" overwrite="true"/>
		<copy file="../${project.ejb}/properties/jndi-${jndi.conf}.properties" 
			tofile="../${project.ejb}/${classes.dir}/jndi.properties" overwrite="true"/>		
	</target>
	
	<target name="createEJBJar" 
		depends="createDist, updateDataSourceInfo, filterWithoutConfiguration, filterWithConfiguration, filterXavaFiles, configureJNDI">
		<jar jarfile="${dist.dir}/${name.jar}.jar" 
			basedir="../${project.ejb}/${classes.dir}" 
			manifest="../${project.ejb}/${meta-inf.dir}/MANIFEST.MF"/>
	</target>

    <target name="createLibJars">        
    	<!-- openxava.jar -->
    	<jar jarfile="${dist.dir}/lib/openxava.jar" basedir="../OpenXava/bin"/>    
    	<!-- server-properties.jar -->
    	<mkdir dir="${server.properties.dir}"/>
		<copy 	toDir="${server.properties.tmp.dir}" overwrite="yes">    
			<fileset dir="${server.properties.dir}" />				
	    	<filterset>
				<filter token="subcontext" value="${subcontext}"/>
			</filterset>  
		</copy>      	
        <jar jarfile="${dist.dir}/lib/server-properties.jar" basedir="${server.properties.tmp.dir}" />    	
    </target>

	<target name="copyEarConf">
	  <copy file="../${project}/build/j2ee/META-INF/application.xml" tofile="${dist.dir}/META-INF/application.xml" overwrite="true"/>		
	  <copy file="../OpenXava/build/jboss-app.xml" todir="${dist.dir}/META-INF" overwrite="true">
    	<filterset>
			<filter token="file.ear" value="${file.ear}"/>
		</filterset>  		
	  </copy>		
	</target>        
		
    <target name="createEar" depends="createLibJars, copyEarConf">        
        <jar jarfile="${dist.dir}/${file.ear}" basedir="${dist.dir}" excludes="*.ear"/>
    </target>
	
	<target name="createWebsphereEar" depends="createLibJars">		
		<antcall target="createWar"/>
		<copy file="../${project}/build/j2ee/META-INF/application-websphere.xml" tofile="${dist.dir}/META-INF/application.xml" overwrite="true"/>				
		<jar jarfile="${dist.dir}/${file.ear}" basedir="${dist.dir}" excludes="*.ear"/>
	</target>	
	
    <target name="deployEJB"  depends="createEar">        
        <copy file="${dist.dir}/${file.ear}" todir="${deploy.dir}"/>
    </target>	
	
	<target name="updateDataSourceInfo">
		<echo file="../${project.ejb}/${classes.dir}/datasource.properties">${domain}/${package}=${datasource}</echo>
	</target>
	
	<target name="filterI18n" if="configuration">
  		<copy todir="../${project}/web/WEB-INF/classes" overwrite="true">
    		<fileset dir="../${project}/i18n"/>
	    	<filterset>	    	
				<filtersfile file="${configuration}.properties"/>				
			</filterset> 			             		
  		</copy>			
	</target>
				
	<target name="prepareWar" depends="createDist, updateDataSourceInfo, configureJNDI">		
  		<copy todir="../${project}/web/xava" preservelastmodified="true">
    		<fileset dir="../OpenXava/web" excludes="WEB-INF/**"/>
  		</copy>		
  		<copy todir="../${project}/web/WEB-INF" preservelastmodified="true">
    		<fileset dir="../OpenXava/web/WEB-INF"/>
  		</copy>		
		<antcall target="filterXavaFiles">  		
			<param name="classes.dir" value="web/WEB-INF/classes"/>
		</antcall>
		<antcall target="filterHibernateFiles">  		
			<param name="classes.dir" value="web/WEB-INF/classes"/>
		</antcall>		
		<antcall target="filterI18n"/>  		
		<copy file="../OpenXava/bin/Messages_${default.language}.properties" 
			tofile="../OpenXava/bin/Messages.properties"/>
		<copy file="../OpenXava/bin/Labels_${default.language}.properties" 
			tofile="../OpenXava/bin/Labels.properties"/>		
		<copy file="../OpenXava/bin/XavaResources_${default.language}.properties" 
			tofile="../OpenXava/bin/XavaResources.properties"/>				
		<copy file="../${project}/${classes.dir}/${project}-messages_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/${project}-messages.properties"
			failonerror="false"/>
		<copy file="../${project}/${classes.dir}/${project}-labels_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/${project}-labels.properties"
			failonerror="false"/>
		<copy file="../${project}/${classes.dir}/Mensajes${project}_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/Mensajes${project}.properties"
			failonerror="false"/>
		<copy file="../${project}/${classes.dir}/Etiquetas${project}_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/Etiquetas${project}.properties"
			failonerror="false"/>
		<jar jarfile="../${project}/web/WEB-INF/lib/openxava.jar" basedir="../OpenXava/bin"/>
		<copy file="${jboss.dir}/client/jboss-client.jar" todir="../${project}/web/WEB-INF/lib" preservelastmodified="true"/>
	</target>
	
	<target name="createWar" depends="prepareWar">
		<jar jarfile="${dist.dir}/${name.war}.war" basedir="web"/>
	</target>
	
	<target name="deployWar" depends ="createWar">		
		<copy file="${dist.dir}/${name.war}.war" todir="${deploy.dir}" overwrite="true"/>
	</target>
	
	<target name="regeneratePortletGenerator">
		<echo>Generating xml template for Portlet Application</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/portletxml.template"/> 
			<arg value="${generator.dir}/portletxml.xml"/>         
		</java>				
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/jetspeed2psml.template"/> 
			<arg value="${generator.dir}/jetspeed2psml.xml"/>         
		</java>						
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/jetspeed2folder.template"/> 
			<arg value="${generator.dir}/jetspeed2folder.xml"/>         
		</java>						
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}/jetspeed2ds.template"/> 
			<arg value="${generator.dir}/jetspeed2ds.xml"/>         
		</java>								
				
		<echo>Generating Portlet Application classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/portletxml.xml"/>
			<arg value="${generator.dir}/PortletXmlPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/jetspeed2psml.xml"/>
			<arg value="${generator.dir}/Jetspeed2PsmlPG.java"/>
		</java>		
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/jetspeed2folder.xml"/>
			<arg value="${generator.dir}/Jetspeed2FolderPG.java"/>
		</java>				
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}/jetspeed2ds.xml"/>
			<arg value="${generator.dir}/Jetspeed2DsPG.java"/>
		</java>						
		<echo>Compiling classes generators</echo>
		<javac srcdir="${generator.dir}"
			destdir="${generator.dir}"
			classpath="${tl.lib};${xava.lib};${j2ee.lib}"
		/>
		
	</target>
	
	<target name="generatePortletXml" unless="regenerate.portlet.xml.notRequired">						
		<echo>Generating portlets files</echo>
		<!-- PortletCodeGenerator can generate portlets.xml, .psml, .ds and all jetspeed2 files -->
		<java 
			classname="PortletCodeGenerator" 
			classpath="${generator.dir};${tl.lib};${xava.lib};${j2ee.lib};${components.dir};../${project}/${classes.dir};${xava.generator.path}" 
			fork="yes">
			<arg value="${project}"/>
			<arg value="${jetspeed2.pages.dir}"/>
			<arg value="${generate.jetspeed2.files}"/>
		</java>		
	</target>	
	
	<!-- Although generates Jetspeed2 files it maybe used for websphere portal or another standard JSR-168 portal too -->
	<target name="deployPortlets" depends="initPortlets, generatePortletXml">		
		<antcall target="prepareWar"/>
		<mkdir dir="${dist.portlets.dir}"/>
		<copy todir="${dist.portlets.dir}/WEB-INF">
			<fileset dir="web/WEB-INF"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava/images">
			<fileset dir="web/xava/images"/>
		</copy>		
		<copy todir="${dist.portlets.dir}/xava/style">
			<fileset dir="web/xava/style"/>
		</copy>				
		<copy todir="${dist.portlets.dir}/xava/editors/calendar">
			<fileset dir="web/xava/editors/calendar"/>
		</copy>						
		<copy todir="${dist.portlets.dir}/WEB-INF/jsp" >
			<fileset dir="web" excludes="WEB-INF/**, xava/images/**, xava/style/**, xava/editors/calendar/**, xava/jasperReport.jsp"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava" file="web/xava/jasperReport.jsp"/>
		<jar jarfile="${dist.dir}/${name.war}.war" basedir="${dist.portlets.dir}"/>
		<copy file="${dist.dir}/${name.war}.war" todir="${deploy.portlets.dir}" overwrite="true"/>		
	</target>
	
</project>