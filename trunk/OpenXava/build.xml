<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- OpenXava -->

<project name="OpenXava" default="deployWar">

	<property name="default.language" value="en"/>
	<property name="datasource" value="DataSource"/>
	<property name="datasource.prefix" value="java:"/>
	<property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>
	<property name="dist.base.dir" value = ".."/>
	<property name="dist.dir" value = "${dist.base.dir}/${project}.dist"/>
	<property name="dist.portlets.dir" value = "${dist.base.dir}/${project}-portlets.war.d"/>
	<property name="file.ear" value = "${project}.ear"/>
	<property name="xava.lib" value="../OpenXava/bin"/>
	<property name="j2ee.lib" value="../OpenXava/lib/servlet-api.jar;../OpenXava/web/WEB-INF/lib/jta.jar;../OpenXava/web/WEB-INF/lib/ejb.jar;../OpenXava/lib/jsp-api.jar"/>
	<property name="tl.lib" location="../OpenXava/lib/tl.jar"/>
	<property name="logging.lib" location="../OpenXava/web/WEB-INF/lib/commons-logging.jar"/>
	<property name="generator.dir" value="..${file.separator}OpenXava${file.separator}generator"/>
	<property name="tracking.classes" value="../AccessTracking/web/WEB-INF/classes;../OpenXava/web/WEB-INF/lib/hibernate3.jar"/>
	<property name="subcontext" value="${project}"/>
	<property name="classes.dir" value="web/WEB-INF/classes"/>
	<property name="name.war" value="${project}"/>
	<property name="separator" value="."/>
	<property name="meta-inf.dir" value="build/ejb/META-INF"/>
	<property name="project.name" value = "${project}"/>
	<property name="name.jar" value = "${project.name}"/>
	<property name="server.properties.dir" value="../OpenXava/build/server-properties"/>
	<property name="server.properties.tmp.dir" value="${user.home}/tmpServerProperties"/>
	<property name="model.package" value="model"/>
	<property name="javac.version" value="1.6"/>
	<property name="portlet.encoding" value="UTF-8"/>
	<property name="deploy.portlets.dir" value="${deploy.dir}/openxava${war.dir.suffix}/WEB-INF/deploy"/>
	<property name="generate.jetspeed2.files" value="true"/>
	<property name="jetspeed2.pages.dir" value="${deploy.dir}/openxava${war.dir.suffix}/WEB-INF/pages"/>
	<property name="portlets.default.locale" value="en"/>
	<property name="hibernate.properties" value=""/>
	<property name="compile.src.path" value="../${project}/src"/>

	<!-- Set up java.class.path -->
	<path id="project.class.path">

		<pathelement path="${tl.dir}" />

		<!-- LOG4J properties -->
		<pathelement path="${basedir}" />

		<!-- append the external classpath lastly -->
		<pathelement path="${java.class.path}" />

	</path>

	<target name="init">
		<tstamp/>
		<available file="../${project.name}/filtered-files" type="dir"
			property="classic-xml"/>
	</target>

	<target name="initPortlets">
		<uptodate property="regenerate.portlet.xml.notRequired"
			targetfile="../${project.name}/web/WEB-INF/portlet.xml">
			<srcfiles file="../${project.name}/xava/application.xml"/>
			<srcfiles file="../${project.name}/xava/aplicacion.xml"/>
		</uptodate>
	</target>

	<target name="createDist">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/lib"/>
	</target>

	<target name="copyComponentDTDs" if="xml.components">
		<copy todir="../${project}/components/dtds" overwrite="true">
			<fileset dir="../OpenXava/xava/dtds" includes="componente.dtd,component.dtd"/>
		</copy>
	</target>

	<target name="copyXavaDTDs">

		<copy todir="../${project}/xava/dtds" overwrite="true">
			<fileset dir="../OpenXava/xava/dtds" excludes="componente.dtd,component.dtd"/>
		</copy>

	</target>

	<target name="copyDTDs">

		<antcall target="copyXavaDTDs"/>
		<available file="../${project}/components" type="dir"
		           property="xml.components"/>
		<antcall target="copyComponentDTDs"/>

	</target>

	<target name="filterXavaFilesWithoutConfiguration" unless="configuration">
		<!-- to replace within xava files -->
		<copy todir="../${project.name}/filtered-files" overwrite="${overwrite.xava.files}">
			<fileset dir="../${project.name}/xava"/>
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<!-- to replace within xava components -->
		<copy todir="../${project.name}/filtered-files" overwrite="${overwrite.xava.files}">
			<fileset dir="../${project.name}/components"/>
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
				<filter token="access.table" value="${access.table}"/>
			</filterset>
		</copy>
	</target>


	<target name="filterXavaFilesWithConfiguration" if="configuration">
		<!-- to replace within xava files -->
		<copy todir="../${project.name}/filtered-files" overwrite="${overwrite.xava.files}">
			<fileset dir="../${project.name}/xava"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<!-- to replace within xava components -->
		<copy todir="../${project.name}/filtered-files" overwrite="${overwrite.xava.files}">
			<fileset dir="../${project.name}/components"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
				<filter token="access.table" value="${access.table}"/>
			</filterset>
		</copy>
	</target>

	<target name="filterXavaFiles" depends="init, copyDTDs" if="classic-xml">
		<antcall target="filterXavaFilesWithConfiguration">
			<param name="overwrite.xava.files" value="true"/>
		</antcall>
		<antcall target="filterXavaFilesWithoutConfiguration">
			<param name="overwrite.xava.files" value="true"/>
		</antcall>
	</target>

	<target name="filterChangedXavaFiles" depends="init, copyDTDs" if="classic-xml">
		<antcall target="filterXavaFilesWithConfiguration">
			<param name="overwrite.xava.files" value="false"/>
		</antcall>
		<antcall target="filterXavaFilesWithoutConfiguration">
			<param name="overwrite.xava.files" value="false"/>
		</antcall>
	</target>

	<target name="filterHibernateFilesWithoutConfiguration" unless="configuration">
		<copy todir="../${project.name}/filtered-files" failonerror="false" overwrite="${overwrite.hibernate.files}">
			<fileset dir="../OpenXava/hibernate"/>
			<fileset dir="../${project.name}/hibernate"/>
			<fileset dir="../${project.name}/build/hibernate"/>
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="datasource.prefix" value="${datasource.prefix}"/>
				<filter token="hibernate.dialect" value="${hibernate.dialect}"/>
				<filter token="hibernate.properties" value="${hibernate.properties}"/>
			</filterset>
		</copy>
	</target>

	<target name="filterHibernateFilesWithConfiguration" if="configuration">
		<copy todir="../${project.name}/filtered-files" failonerror="false" overwrite="${overwrite.hibernate.files}">
			<fileset dir="../OpenXava/hibernate"/>
			<fileset dir="../${project.name}/hibernate"/>
			<fileset dir="../${project.name}/build/hibernate"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="images.schema.definition" value='schema="@images.schema@"'/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="datasource.prefix" value="${datasource.prefix}"/>
				<filter token="hibernate.dialect" value="${hibernate.dialect}"/>
				<filter token="hibernate.properties" value="${hibernate.properties}"/>
			</filterset>
		</copy>
	</target>

	<target name="filterHibernateFiles" depends="init, copyDTDs" if="classic-xml">
		<antcall target="filterHibernateFilesWithConfiguration">
			<param name="overwrite.hibernate.files" value="true"/>
		</antcall>
		<antcall target="filterHibernateFilesWithoutConfiguration">
			<param name="overwrite.hibernate.files" value="true"/>
		</antcall>
	</target>

	<target name="filterChangedHibernateFiles" depends="init, copyDTDs" if="classic-xml">
		<antcall target="filterHibernateFilesWithConfiguration">
			<param name="overwrite.hibernate.files" value="false"/>
		</antcall>
		<antcall target="filterHibernateFilesWithoutConfiguration">
			<param name="overwrite.hibernate.files" value="false"/>
		</antcall>
	</target>

	<target name="regenerateGenerator">
		<echo>Generating xml template for POJO</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}calculatedCollection.template"/>
			<arg value="${generator.dir}${file.separator}calculatedCollection.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}calculators.template"/>
			<arg value="${generator.dir}${file.separator}calculators.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}property.template"/>
			<arg value="${generator.dir}${file.separator}property.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}entityReference.template"/>
			<arg value="${generator.dir}${file.separator}entityReference.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}aggregateReference.template"/>
			<arg value="${generator.dir}${file.separator}aggregateReference.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}methods.template"/>
			<arg value="${generator.dir}${file.separator}methods.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}initMembers.template"/>
			<arg value="${generator.dir}${file.separator}initMembers.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}pojo.template"/>
			<arg value="${generator.dir}${file.separator}pojo.xml"/>
		</java>
		<echo>Generating xml template for JavaBean</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}bean.template"/>
			<arg value="${generator.dir}${file.separator}bean.xml"/>
		</java>
		<echo>Generating xml template for interface</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}interface.template"/>
			<arg value="${generator.dir}${file.separator}interface.xml"/>
		</java>
		<echo>Generating xml template for hibernate mapping</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}hibernate.template"/>
			<arg value="${generator.dir}${file.separator}hibernate.xml"/>
		</java>

		<echo>Generating POJO classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}calculatedCollection.xml"/>
			<arg value="${generator.dir}${file.separator}CalculatedCollectionPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}calculators.xml"/>
			<arg value="${generator.dir}${file.separator}CalculatorsPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}property.xml"/>
			<arg value="${generator.dir}${file.separator}PropertyPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}entityReference.xml"/>
			<arg value="${generator.dir}${file.separator}EntityReferencePG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}aggregateReference.xml"/>
			<arg value="${generator.dir}${file.separator}AggregateReferencePG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}methods.xml"/>
			<arg value="${generator.dir}${file.separator}MethodsPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}initMembers.xml"/>
			<arg value="${generator.dir}${file.separator}InitMembersPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}pojo.xml"/>
			<arg value="${generator.dir}${file.separator}PojoPG.java"/>
		</java>
		<echo>Generating JavaBean classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}bean.xml"/>
			<arg value="${generator.dir}${file.separator}BeanPG.java"/>
		</java>
		<echo>Generating Interfaz classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}interface.xml"/>
			<arg value="${generator.dir}${file.separator}InterfacePG.java"/>
		</java>
		<echo>Generating hibernate mapping classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}hibernate.xml"/>
			<arg value="${generator.dir}${file.separator}HibernatePG.java"/>
		</java>

		<echo>Compiling classes generators</echo>
		<javac srcdir="${generator.dir}"
	         destdir="${generator.dir}"
	         classpath="${tl.lib};${xava.lib};${j2ee.lib}"
	   		 target="${javac.version}" source="${javac.version}"
    	/>

		<delete file="../${project}/gen-src-xava/dnas.properties"/>
		<delete file="../${project}/gen-src-xava/dnas-pojo.properties"/>
	</target>

	<target name="regenerateHibernate">
		<delete file="../${project}/gen-src-xava/dnas-pojo.properties"/>
		<delete>
			<fileset dir="../${project.name}/filtered-files" includes="**/*"/>
		</delete>
		<antcall target="generateHibernate"/>
	</target>

	<target name="generateHibernate" depends="filterXavaFiles">
		<mkdir dir="../${project}/build/hibernate"/>
		<echo>Generating POJOs/Hibernate</echo>
		<java 
			classname="HCodeGenerator" 
       		fork="yes">
			<arg value="${project}"/>
			<arg value="${domain}"/>
			<arg value="${package}"/>
			<arg value="${model.package}"/>
			<classpath>
				<pathelement path="../OpenXava/bin"/>
				<fileset dir="../OpenXava/web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="../OpenXava/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement path="${generator.dir};${tl.lib};${xava.lib};${j2ee.lib};${groovy.lib};../${project}/filtered-files;../${project}/${classes.dir};${xava.generator.path}"/>
			</classpath>
		</java>		
		<antcall target="filterHibernateFiles"/>
	</target>

	<target name="clearGeneratedCode">
		<delete failonerror="false">
			<fileset dir="../${project}/gen-src"/>
			<fileset dir="../${project}/gen-src-xava"/>
			<fileset dir="../${project}/${meta-inf.dir}" excludes="MANIFEST.MF"/>
		</delete>
	</target>

	<target name="filterWithoutConfiguration" unless="configuration" 
		depends="init">
		<copy file="../${project.name}/${meta-inf.dir}/ejb-jar.xml" 
			toFile="../${project.name}/${classes.dir}/META-INF/ejb-jar.xml" 
			overwrite="yes">
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<copy file="../${project.name}/${meta-inf.dir}/jboss.xml" 
			toFile="../${project.name}/${classes.dir}/META-INF/jboss.xml" 
			overwrite="yes">
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy file="../${project.name}/${meta-inf.dir}/ibm-ejb-jar-bnd.xmi" 
			toFile="../${project.name}/${classes.dir}/META-INF/ibm-ejb-jar-bnd.xmi" 
			overwrite="yes" failonerror="no">
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy todir="../${project.name}/${classes.dir}/META-INF/backends" 
			overwrite="yes" failonerror="no">
			<fileset dir="../${project.name}/${meta-inf.dir}/backends"/>
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
	</target>

	<target name="filterWithConfiguration" if="configuration" 
		depends="init">
		<copy file="../${project.name}/${meta-inf.dir}/ejb-jar.xml" 
			toFile="../${project.name}/${classes.dir}/META-INF/ejb-jar.xml" 
			overwrite="yes">
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<copy file="../${project.name}/${meta-inf.dir}/jboss.xml" 
			toFile="../${project.name}/${classes.dir}/META-INF/jboss.xml" 
			overwrite="yes">
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy file="../${project.name}/${meta-inf.dir}/ibm-ejb-jar-bnd.xmi" 
			toFile="../${project.name}/${classes.dir}/META-INF/ibm-ejb-jar-bnd.xmi" 
			overwrite="yes" failonerror="no">
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy todir="../${project.name}/${classes.dir}/META-INF/backends" 
			overwrite="yes" failonerror="no">
			<fileset dir="../${project.name}/${meta-inf.dir}/backends"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
	</target>

	<target name="configureJNDI" depends="init" if="classic-xml">
		<antcall target="configureJNDIImpl"/>
	</target>

	<target name="configureJNDIImpl" if="jndi.conf">
		<copy file="../${project.name}/properties/jndi-${jndi.conf}.properties" 
			tofile="../${project.name}/properties/jndi.properties" overwrite="true"/>
		<copy file="../${project.name}/properties/jndi-${jndi.conf}.properties" 
			tofile="../${project.name}/${classes.dir}/jndi.properties" overwrite="true"/>
	</target>

	<target name="prepareCompile">
		<!-- We create the 'lib' and 'classes' folder for it does not fails at the first time -->
		<mkdir dir="web/WEB-INF/lib"/>
		<mkdir dir="web/WEB-INF/classes"/>
	</target>

	<target name="compile">
		<antcall target="compileJava"/>
		<antcall target="compileGroovy"/>
	</target>

	<target name="compileJava" depends="prepareCompile">
		<javac destdir="../${project}/web/WEB-INF/classes">
			<src path="${compile.src.path}"/>
			<!-- Only needed if you uses XDoclet generated code
			<src path="../${project}/gen-src"/> 
			-->
			<!-- Only needed if you use XML components
			<src path="../${project}/gen-src-xava"/>  
			-->
			<classpath>
				<pathelement path="../OpenXava/bin"/>
				<fileset dir="../OpenXava/web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="../OpenXava/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement path="${j2ee.lib};${xava.compiler.path}"/>
			</classpath>
		</javac>
		<copy todir="../${project}/web/WEB-INF/classes">
			<!-- Only needed if you use XML components
			<fileset dir="../${project}/gen-src-xava" excludes="**/*.java"/>
			-->
			<fileset dir="../${project}/xava"/>
			<fileset dir="../${project}/persistence"/>
			<fileset dir="../${project}/i18n"/>
			<fileset dir="../${project}/properties"/>
		</copy>
	</target>

	<target name="compileGroovy" depends="prepareCompile">
		<taskdef name="groovyc"
		  classname="org.codehaus.groovy.ant.Groovyc"
		  classpath="../OpenXava/web/WEB-INF/lib/groovy-all.jar"/>

		<groovyc destdir="../${project}/web/WEB-INF/classes">
			<src path="${compile.src.path}"/>
			<classpath>
				<pathelement path="../OpenXava/bin"/>
				<fileset dir="../OpenXava/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="../OpenXava/web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement path="web/WEB-INF/classes"/>
				<fileset dir="web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement path="${j2ee.lib};${xava.compiler.path}"/>
			</classpath>
		</groovyc>

		<copy todir="../${project}/web/WEB-INF/classes">
			<fileset dir="../${project}/xava"/>
			<fileset dir="../${project}/persistence"/>
			<fileset dir="../${project}/i18n"/>
			<fileset dir="../${project}/properties"/>
		</copy>
	</target>


	<target name="createEJBJar" 
		depends="createDist, updateDataSourceInfo, filterWithConfiguration, filterWithoutConfiguration, filter, configureJNDI">
		<jar jarfile="${dist.dir}/${name.jar}.jar" 
			basedir="../${project.name}/${classes.dir}" 
			manifest="../${project.name}/${meta-inf.dir}/MANIFEST.MF"/>
	</target>

	<target name="copyLibsForEAR">
		<copy todir="${dist.dir}/lib">
			<fileset dir="web/WEB-INF/lib"/>
		</copy>
	</target>

	<target name="createLibJars">
		<!-- openxava.jar -->
		<jar jarfile="${dist.dir}/lib/openxava.jar" basedir="../OpenXava/bin"/>
		<!-- server-properties.jar -->
		<mkdir dir="${server.properties.dir}"/>
		<copy 	toDir="${server.properties.tmp.dir}" overwrite="yes">
			<fileset dir="${server.properties.dir}" />
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
			</filterset>
		</copy>
		<jar jarfile="${dist.dir}/lib/server-properties.jar" basedir="${server.properties.tmp.dir}" />
	</target>

	<target name="copyEarConf">
		<copy file="../${project}/build/j2ee/META-INF/application.xml" tofile="${dist.dir}/META-INF/application.xml" overwrite="true"/>
		<copy file="../OpenXava/build/jboss-app.xml" todir="${dist.dir}/META-INF" overwrite="true">
			<filterset>
				<filter token="file.ear" value="${file.ear}"/>
			</filterset>
		</copy>
	</target>

	<target name="createEar" depends="createLibJars, copyLibsForEAR, copyEarConf">
		<jar jarfile="${dist.dir}/${file.ear}" basedir="${dist.dir}" excludes="*.ear"/>
	</target>

	<target name="createWebsphereEar" depends="createLibJars">
		<antcall target="createWar"/>
		<copy file="../${project}/build/j2ee/META-INF/application-websphere.xml" tofile="${dist.dir}/META-INF/application.xml" overwrite="true"/>
		<jar jarfile="${dist.dir}/${file.ear}" basedir="${dist.dir}" excludes="*.ear"/>
	</target>

	<target name="deployEJB"  depends="createEar">
		<copy file="${dist.dir}/${file.ear}" todir="${deploy.dir}"/>
	</target>

	<target name="updateDataSourceInfo" depends="init" if="classic-xml">
		<echo file="../${project.name}/filtered-files/datasource.properties">${domain}/${package}=${datasource.prefix}/${datasource}</echo>
		<echo file="../${project.name}/${classes.dir}/datasource.properties">${domain}/${package}=${datasource.prefix}/${datasource}</echo>
	</target>

	<target name="filterI18n" depends="init" if="classic-xml">
		<antcall target="filterI18nWithConfiguration"/>
		<antcall target="filterI18nWithoutConfiguration"/>
	</target>

	<target name="filterI18nWithConfiguration" if="configuration">
		<copy todir="../${project}/filtered-files" overwrite="true"	encoding="ISO-8859-1">
			<fileset dir="../${project}/i18n" excludes="portlets, portlets/*"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
			</filterset>
		</copy>
		<antcall target="copyI18nPortlets"/>
	</target>

	<target name="filterI18nWithoutConfiguration" unless="configuration">
		<copy todir="../${project}/filtered-files" overwrite="true"	encoding="ISO-8859-1">
			<fileset dir="../${project}/i18n" excludes="portlets, portlets/*"/>
		</copy>
		<antcall target="copyI18nPortlets"/>
	</target>

	<target name="copyI18nPortlets">
		<copy todir="../${project}/${classes.dir}/portlets" failonerror="false" encoding="ISO-8859-1">
			<fileset dir="../${project}/i18n/portlets"/>
		</copy>
	</target>

	<target name="copyI18nPortletsToClasses" depends="init">
		<copy todir="../${project}/${classes.dir}/portlets" failonerror="false">
			<fileset dir="../${project}/i18n/portlets"/>
		</copy>
	</target>

	<target name="filter" depends="init, filterXavaFiles, filterHibernateFiles, filterI18n, updateDataSourceInfo" if="classic-xml">
		<copy todir="../${project}/${classes.dir}">
			<fileset dir="../${project}/filtered-files"/>
		</copy>
	</target>

	<target name="createWebXml">
		<loadfile property="servlets.xml" srcfile="../${project}/web/WEB-INF/servlets.xml" failonerror="false"/>
		<property name="servlets.xml" value=""/>
		<loadfile property="filters.xml" srcfile="../${project}/web/WEB-INF/filters.xml" failonerror="false"/>
		<property name="filters.xml" value=""/>
		<loadfile property="listeners.xml" srcfile="../${project}/web/WEB-INF/listeners.xml" failonerror="false"/>
		<property name="listeners.xml" value=""/>
		<copy file="../OpenXava/web/WEB-INF/web.xml" 
  			todir="../${project}/web/WEB-INF" overwrite="true">
			<filterset>
				<filter token="servlets.xml" value="${servlets.xml}"/>
				<filter token="filters.xml" value="${filters.xml}"/>
				<filter token="listeners.xml" value="${listeners.xml}"/>
			</filterset>
		</copy>
	</target>

	<target name="createEditorsJS">
		<fileset id="editorsjs.dir" dir="web/xava/editors/js">
			<include name="*.js" />
		</fileset>

		<pathconvert pathsep="&#xA;" property="editorsjs.files" refid="editorsjs.dir">
			<mapper type="flatten" />
		</pathconvert>

		<echo file="../${project}/web/WEB-INF/classes/editors-js.properties">${editorsjs.files}</echo>
	</target>

	<target name="prepareWar" depends="createDist, updateDataSourceInfo, configureJNDI">
		<antcall target="copyWeb"/>
		<antcall target="installAddons"/>
		<antcall target="createWebXml"/>
		<antcall target="filter"/>
		<antcall target="createEditorsJS"/>
		<copy file="../OpenXava/bin/Messages_${default.language}.properties" 
			tofile="../OpenXava/bin/Messages.properties"/>
		<copy file="../OpenXava/bin/Labels_${default.language}.properties" 
			tofile="../OpenXava/bin/Labels.properties"/>
		<copy file="../${project}/${classes.dir}/${project}-messages_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/${project}-messages.properties"
			failonerror="false"/>
		<copy file="../${project}/${classes.dir}/${project}-labels_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/${project}-labels.properties"
			failonerror="false"/>
		<copy file="../${project}/${classes.dir}/Mensajes${project}_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/Mensajes${project}.properties"
			failonerror="false"/>
		<copy file="../${project}/${classes.dir}/Etiquetas${project}_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/Etiquetas${project}.properties"
			failonerror="false"/>
		<jar jarfile="../${project}/web/WEB-INF/lib/openxava.jar" basedir="../OpenXava/bin"/>
	</target>

	<target name="createWar" depends="prepareWar">
		<jar jarfile="${dist.dir}/${name.war}.war" basedir="web"/>
	</target>
		
	<target name="createWebSphere8War" depends="prepareWar">
		<jar jarfile="${dist.dir}/${name.war}.war" basedir="web" excludes="WEB-INF/lib/validation-api.jar"/>
	</target>

	<target name="deployWar" depends ="createWar">
		<copy file="${dist.dir}/${name.war}.war" todir="${deploy.dir}" overwrite="true"/>
	</target>

	<target name="deploy" depends="prepareWar">
		<!-- Commented in order to run Tutorial fine
		<delete file="${deploy.dir}/${name.war}.war" failonerror="false"/>
		-->
		<mkdir dir="${deploy.dir}/${name.war}${war.dir.suffix}"/>
		<copy todir="${deploy.dir}/${name.war}${war.dir.suffix}" preservelastmodified="true">
			<fileset dir="../${project}/web"/>
		</copy>
		<touch file="${deploy.dir}/${name.war}${war.dir.suffix}/WEB-INF/web.xml"/>
	</target>

	<target name="regeneratePortletGenerator">
		<echo>Generating xml template for Portlet Application</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}portletxml.template"/>
			<arg value="${generator.dir}${file.separator}portletxml.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}liferayDisplayxml.template"/>
			<arg value="${generator.dir}${file.separator}liferayDisplayxml.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}jetspeed2psml.template"/>
			<arg value="${generator.dir}${file.separator}jetspeed2psml.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}jetspeed2folder.template"/>
			<arg value="${generator.dir}${file.separator}jetspeed2folder.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}jetspeed2ds.template"/>
			<arg value="${generator.dir}${file.separator}jetspeed2ds.xml"/>
		</java>

		<echo>Generating Portlet Application classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}portletxml.xml"/>
			<arg value="${generator.dir}${file.separator}PortletXmlPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}liferayDisplayxml.xml"/>
			<arg value="${generator.dir}${file.separator}LiferayDisplayXmlPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}jetspeed2psml.xml"/>
			<arg value="${generator.dir}${file.separator}Jetspeed2PsmlPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}jetspeed2folder.xml"/>
			<arg value="${generator.dir}${file.separator}Jetspeed2FolderPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}jetspeed2ds.xml"/>
			<arg value="${generator.dir}${file.separator}Jetspeed2DsPG.java"/>
		</java>
		<echo>Compiling classes generators</echo>
		<javac srcdir="${generator.dir}"
			destdir="${generator.dir}"
			classpath="${tl.lib};${xava.lib};${j2ee.lib}"
			target="${javac.version}" source="${javac.version}"
		/>

	</target>

	<target name="generatePortletXml" depends="filter" unless="regenerate.portlet.xml.notRequired">
		<echo>Generating portlets files</echo>
		<!-- PortletCodeGenerator can generate portlets.xml, .psml and other jetspeed2 files -->
		<java 
			classname="PortletCodeGenerator" 
			fork="yes">
			<classpath>
				<pathelement path="../OpenXava/bin"/>
				<fileset dir="../OpenXava/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="../OpenXava/web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="web/WEB-INF/lib">
					<include name="**/*.jar"/>
					<exclude name="openxava.jar"/>
				</fileset>
				<pathelement path="${generator.dir};${tl.lib};${j2ee.lib};${logging.lib};../${project}/${classes.dir};${xava.generator.path}"/>
			</classpath>
			<arg value="${project}"/>
			<arg value="${jetspeed2.pages.dir}"/>
			<arg value="${generate.jetspeed2.files}"/>
			<arg value="${portlet.encoding}"/>
			<arg value="${portlets.default.locale}"/>
		</java>
	</target>

	<target name="preparePortletsWar" depends="initPortlets, generatePortletXml">
		<antcall target="insertCustomPortlets"/> 
		<antcall target="prepareWar"/>
		<antcall target="copyI18nPortletsToClasses"/>
		<mkdir dir="${dist.portlets.dir}"/>
		<copy todir="${dist.portlets.dir}/WEB-INF">
			<fileset dir="web/WEB-INF"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava/images">
			<fileset dir="web/xava/images"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava/style">
			<fileset dir="web/xava/style"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava/js">
			<fileset dir="web/xava/js"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava/editors/js">
			<fileset dir="web/xava/editors/js"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava/editors/calendar">
			<fileset dir="web/xava/editors/calendar"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava/editors/ckeditor">
			<fileset dir="web/xava/editors/ckeditor"/>
		</copy>
		<copy todir="${dist.portlets.dir}/WEB-INF/jsp" >
			<fileset dir="web" excludes="WEB-INF/**, xava/images/**, xava/style/**, xava/editors/js/**, xava/editors/calendar/**, xava/editors/ckeditor/**, xava/jasperReport.jsp public/**"/>
		</copy>
		<copy todir="${dist.portlets.dir}/public" failonerror="false">
			<fileset dir="web/public"/>
		</copy>
		<copy todir="${dist.portlets.dir}/xava" file="web/xava/jasperReport.jsp"/>

		<copy todir="${dist.portlets.dir}/xava/help" failonerror="false">
			<fileset dir="web/help"/>
		</copy>
	</target>
	
	<target name="createPortletsWar">
		<antcall target="preparePortletsWar"/> 		
		<jar jarfile="${dist.dir}/${name.war}.war" basedir="${dist.portlets.dir}"/>
	</target>
	
	<target name="createWebSpherePortal8War">
		<antcall target="preparePortletsWar"/>
		<replaceregexp file="${dist.portlets.dir}/WEB-INF/web.xml" match="Addons filters begin.*Addons filters end" replace="No filters for WebSphere Portal" flags="s"/>
		<jar jarfile="${dist.dir}/${name.war}.war" basedir="${dist.portlets.dir}" excludes="WEB-INF/lib/validation-api.jar"/>
	</target>
	
	<target name="generateWebSpherePortal8Portlets">
		<antcall target="touchApplicationXML"/>
		<delete dir="${dist.portlets.dir}"/>
		<antcall target="createWebSpherePortal8War">
			<param name="generate.jetspeed2.files" value="false"/>
		</antcall>
	</target>	

	<target name="generatePortlets">
		<antcall target="touchApplicationXML"/>
		<delete dir="${dist.portlets.dir}"/>
		<antcall target="createPortletsWar">
			<param name="generate.jetspeed2.files" value="false"/>
		</antcall>
	</target>

	<target name="insertCustomPortlets">
		<loadfile property="portlet-ext.xml" 
				srcfile="../${project}/web/WEB-INF/portlet-ext.xml" 
				failonerror="false"/>
		<property name="portlet-ext.xml" value=""/>
		<replaceregexp file="web/WEB-INF/portlet.xml"
	               match="@custom.portlets@"
	               replace="${portlet-ext.xml}"/>
		
		<loadfile property="liferay-display-ext.xml" 
				srcfile="../${project}/web/WEB-INF/liferay-display-ext.xml" 
				failonerror="false"/>
		<property name="liferay-display-ext.xml" value=""/>
		<replaceregexp file="web/WEB-INF/liferay-display.xml"
	               match="@custom.portlets@"
	               replace="${liferay-display-ext.xml}"/>
	</target>

	<target name="touchApplicationXML">
		<available file="../${project}/xava/application.xml" property="application.xml.available" />
		<available file="../${project}/xava/aplicacion.xml" property="aplicacion.xml.available" />
		<antcall target="touchApplicationXML_en" />
		<antcall target="touchApplicationXML_es" />
	</target>

	<target name="touchApplicationXML_en" if="application.xml.available">
		<touch file="../${project}/xava/application.xml" />
	</target>

	<target name="touchApplicationXML_es" if="aplicacion.xml.available">
		<touch file="../${project}/xava/aplicacion.xml" />
	</target>

	<target name="redeployPortlets">
		<antcall target="touchApplicationXML" />
		<delete dir="${dist.portlets.dir}" />
		<ant antfile="../OpenXava/build.xml" target="deployPortlets" />
	</target>

	<!-- Although generates Jetspeed2 files it maybe used for websphere portal or another standard JSR-168 portal too -->
	<target name="deployPortlets">
		<antcall target="createPortletsWar" />
		<delete dir="${deploy.dir}/${name.war}${war.dir.suffix}" failonerror="true" />
		<delete file="${deploy.dir}/${name.war}.war" failonerror="false" />
		<copy file="${dist.dir}/${name.war}.war" todir="${deploy.portlets.dir}" overwrite="true" />
	</target>

	<!-- 
	 For Hibernate applications with .hbml.xml files, that is,
	 when code generation from XML components is used, as usual in OpenXava 2.x
	 -->
	<target name="exportSchema">
		<taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask" classpath="../${project}/web/WEB-INF/classes;../OpenXava/web/WEB-INF/lib/hibernate3.jar;../OpenXava/web/WEB-INF/lib/cglib.jar;../OpenXava/web/WEB-INF/lib/dom4j.jar;../OpenXava/lib/commons-logging.jar;../OpenXava/web/WEB-INF/lib/commons-collections.jar;../OpenXava/bin;${j2ee.lib};${schema.path}" />

		<schemaexport
	    	config="${schema.config.file}"
	        quiet="no"
	        text="no"
	        drop="no"
	        delimiter=";"
	    	output="../${project}/data/schema-export.sql"
	    	>

			<fileset dir="../${project}/filtered-files">
				<include name="**/*.hbm.xml"/>
				<exclude name="GalleryImage.hbm.xml"/>
				<exclude name="TabUserPreferences.hbm.xml"/>
			</fileset>

		</schemaexport>
	</target>

	<!-- 
	 For Hibernate applications with .hbml.xml files, that is,
	 when code generation from XML components is used, as usual in OpenXava 2.x
	 -->
	<target name="updateSchema">
		<taskdef name="schemaupdate"
	        classname="org.hibernate.tool.hbm2ddl.SchemaUpdateTask"
	    	classpath="../${project}/web/WEB-INF/classes;../OpenXava/web/WEB-INF/lib/hibernate3.jar;../OpenXava/web/WEB-INF/lib/cglib.jar;../OpenXava/web/WEB-INF/lib/dom4j.jar;../OpenXava/lib/commons-logging.jar;../OpenXava/web/WEB-INF/lib/commons-collections.jar;../OpenXava/web/WEB-INF/lib/groovy-all.jar;../OpenXava/bin;${j2ee.lib};${schema.path}"/>

		<schemaupdate
	    	config="${schema.config.file}"
	    	text="no"
	        quiet="no">

			<fileset dir="../${project}/filtered-files">
				<include name="**/*.hbm.xml"/>
				<exclude name="GalleryImage.hbm.xml"/>
				<exclude name="TabUserPreferences.hbm.xml"/>
			</fileset>

		</schemaupdate>
	</target>

	<!--
	Update this project with the latest OpenXava version present in the workspace.
	It must be called just after update the OpenXava version.
	
	To be use with OX3 or better.
	-->
	<target name="updateOX">
		<antcall target="copyDTDs"/>
		<antcall target="copyWeb"/>
		<antcall target="installAddons"/>
		<antcall target="createWebXml"/>
		<jar jarfile="../${project}/web/WEB-INF/lib/openxava.jar" basedir="../OpenXava/bin"/>
		<!-- Delete the old Hibernate jars (used until v4m5) -->
		<delete file="../${project}/web/WEB-INF/lib/ejb3-persistence.jar"/>
		<delete file="../${project}/web/WEB-INF/lib/hibernate-annotations.jar"/>
		<delete file="../${project}/web/WEB-INF/lib/hibernate-commons-annotations.jar"/>
		<delete file="../${project}/web/WEB-INF/lib/hibernate-entitymanager.jar"/>
		<!-- Delete other unused libraries -->
		<delete file="../${project}/web/WEB-INF/lib/jboss-archive-browsing.jar"/>
		<delete file="../${project}/web/WEB-INF/lib/jaxb-api.jar"/>
		<delete file="../${project}/web/WEB-INF/lib/jaxb-impl.jar"/>
		<delete file="../${project}/web/WEB-INF/lib/jakarta-oro.jar"/>
		<delete file="../${project}/web/WEB-INF/lib/activation.jar"/>
		
		<!-- Delete unused CSS -->
		<delete file="../${project}/web/xava/style/openxava.css"/>
		<!-- Delete old FCKeditor files -->
		<delete file="../${project}/web/xava/editors/fckEditor.jsp"/>
		<delete dir="../${project}/web/xava/editors/FCKeditor"/>
		<!-- Delete unused JS -->
		<delete file="../${project}/web/xava/js/jquery.qtip.js"/>
		<delete file="../${project}/web/xava/js/jquery.bgiframe.min.js"/>
		<delete file="../${project}/web/xava/js/jquery.bgiframe.js"/> 
		<delete file="../${project}/web/xava/style/liferay51/js/init_liferay.js"/>
		<!-- Delete JSPs moved to editors folder -->
		<delete file="../${project}/web/xava/comparatorsBooleanCombo.jsp"/>
		<delete file="../${project}/web/xava/comparatorsCombo.jsp"/>
		<delete file="../${project}/web/xava/comparatorsDescriptionsList.jsp"/>
		<delete file="../${project}/web/xava/comparatorsValidValuesCombo.jsp"/>
		<delete file="../${project}/web/xava/addColumns.jsp"/> 
		<!-- Delete renamed JSPs -->
		<delete file="../${project}/web/xava/editors/customReportNameEditor.jsp"/>
		<delete file="../${project}/web/xava/editors/customReportColumnNameEditor.jsp"/>
		<delete file="../${project}/web/xava/editors/customReportColumnComparatorEditor.jsp"/>
		<delete file="../${project}/web/xava/editors/customReportColumnValidValuesValueEditor.jsp"/>
		<delete file="../${project}/web/xava/editors/customReportColumnDescriptionsListValueEditor.jsp"/>		
		<!-- Delete unused images -->
		<delete file="../${project}/web/xava/images/customize.gif"/>
		<delete file="../${project}/web/xava/images/hide-filter.gif"/>
		<delete file="../${project}/web/xava/style/ipad/images/customize.gif"/>
		<delete file="../${project}/web/xava/style/ipad/images/hide-filter.gif"/>
		<delete file="../${project}/web/xava/images/delete-file.gif"/>
		<delete file="../${project}/web/xava/images/upload.gif"/>
		<delete file="../${project}/web/xava/images/move-left.gif"/>
		<delete file="../${project}/web/xava/images/move-right.gif"/>		
	</target>
	
	<target name="copyWeb">
		<copy todir="../${project}/web/xava" overwrite="true" >
			<fileset dir="../OpenXava/web" excludes="WEB-INF/**,style/custom.css"/>
		</copy>
		<copy todir="../${project}/web/xava/style" overwrite="false">
			<fileset file="../OpenXava/web/style/custom.css"/>
		</copy>
		<copy todir="../${project}/web/WEB-INF" overwrite="true">
			<fileset dir="../OpenXava/web/WEB-INF"/>
		</copy>
	</target>

	<target name="installAddons">
		<copy todir="../${project}/web" overwrite="true">
			<fileset dir="../Addons/web"/>
		</copy>
		<copy todir="../${project}/properties">
			<fileset dir="../Addons/properties-templates">
				<present present="srconly" targetdir="../${project}/properties" />
			</fileset>
		</copy>
		<copy todir="../${project}/src" overwrite="true" failonerror="false">
			<fileset dir="../Addons/src-to-copy"/>
		</copy>		
		<jar jarfile="../${project}/web/WEB-INF/lib/addons.jar" basedir="../Addons/bin"/>		
	</target>

	<target name="defineHibernateTool">
		<path id="jpatoolslib">
			<path location="../OpenXava/lib/hibernate-tools.jar" />
			<path location="../OpenXava/lib/freemarker.jar" />
			<path location="../OpenXava/lib/commons-logging.jar" />
			<!-- Library from OpenXava in order to work the first time
				before WEB-INF/lib of new project is populated -->
			<fileset dir="../OpenXava/web/WEB-INF/lib">
				<include name="**/*.jar"/>
			</fileset>
			<!-- Library of project to include custom libraries -->
			<fileset dir="../${project}/web/WEB-INF/lib">
				<include name="**/*.jar"/>
			</fileset>
			<path location="../OpenXava/bin" />
			<path location="${schema.path}" />
		</path>

		<taskdef name="hibernatetool" 
			classname="org.hibernate.tool.ant.HibernateToolTask" 
			classpathref="jpatoolslib" />
	</target>

	<!--
	Updates schema for applications developed with POJOs + JPA (not XML),
	that is, for applications developed using OX3 or better.
	-->
	<target name="updateSchemaJPA" depends="defineHibernateTool">

		<hibernatetool destdir="data">
			<jpaconfiguration persistenceunit="${persistence.unit}"/>
			<classpath>
				<path location="web/WEB-INF/classes" />
			</classpath>

			<hbm2ddl update="true" />
		</hibernatetool>

	</target>

	<!-- 
	Generates schema for applications developed with POJOs + JPA (not XML),
	that is, for applications developed using OX3 or better.
	Generates the scheme and show it in the log, 
	but does not execute it against database.
	-->
	<target name="generateSchemaJPA" depends="defineHibernateTool">

		<hibernatetool destdir="data">
			<jpaconfiguration persistenceunit="${persistence.unit}"/>
			<classpath>
				<path location="web/WEB-INF/classes" />
			</classpath>

			<hbm2ddl export="false" create="true" />
		</hibernatetool>

	</target>


</project>