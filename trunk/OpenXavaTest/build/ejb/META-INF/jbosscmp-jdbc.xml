<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE jbosscmp-jdbc PUBLIC "-//JBoss//DTD JBOSSCMP-JDBC 3.2//EN" "http://www.jboss.org/j2ee/dtd/jbosscmp-jdbc_3_2.dtd">

<jbosscmp-jdbc>
   <defaults>
     <datasource>java:/@datasource@</datasource>
     <datasource-mapping>Hypersonic SQL</datasource-mapping>
     <preferred-relation-mapping>relation-table</preferred-relation-mapping>
   </defaults>

   <enterprise-beans>

     <!--
       To add beans that you have deployment descriptor info for, add
       a file to your XDoclet merge directory called jbosscmp-jdbc-beans.xml
       that contains the <entity></entity> markup for those beans.
     -->

      <entity>
         <ejb-name>DrivingLicence</ejb-name>

         <table-name>XAVATEST_DRIVINGLICENCE</table-name>

         <cmp-field>
            <field-name>level</field-name>
            <column-name>LEVEL</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>type</field-name>
            <column-name>TYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Office</ejb-name>

         <table-name>XAVATEST_OFFICE</table-name>

         <cmp-field>
            <field-name>_Receptionist</field-name>
            <column-name>RECEPTIONIST_OID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_ZoneNumber</field-name>
            <column-name>ZONE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_OfficeManager_number</field-name>
            <column-name>MANAGER_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_DefaultCarrier_number</field-name>
            <column-name>CARRIER_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_MainWarehouse_number</field-name>
            <column-name>WAREHOUSE_NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByOfficeManager</method-name>
               <method-params>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Office o WHERE o.number = ?1 AND o._OfficeManager_number = ?2 AND o._ZoneNumber = ?3 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByDefaultCarrier</method-name>
               <method-params>
                  <method-param>java.lang.Integer</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Office o WHERE o._DefaultCarrier_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByMainWarehouse</method-name>
               <method-params>
                  <method-param>java.lang.Integer</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Office o WHERE o._MainWarehouse_number = ?1 AND o._ZoneNumber = ?2 ]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Delivery</ejb-name>

         <table-name>XAVATEST_DELIVERY</table-name>

         <cmp-field>
            <field-name>_Distance</field-name>
            <column-name>DISTANCE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Incidents</field-name>
            <column-name>INCIDENTS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_DriverType</field-name>
            <column-name>DRIVERTYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Remarks</field-name>
            <column-name>REMARKS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Employee</field-name>
            <column-name>EMPLOYEE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Vehicle</field-name>
            <column-name>VEHICLE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>date_day</field-name>
            <column-name>DAY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>date_month</field-name>
            <column-name>MONTH</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>date_year</field-name>
            <column-name>YEAR</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Type_number</field-name>
            <column-name>TYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Shipment_type</field-name>
            <column-name>SHIPMENT_TYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Shipment_mode</field-name>
            <column-name>SHIPMENT_MODE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Shipment_number</field-name>
            <column-name>SHIPMENT_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Carrier_number</field-name>
            <column-name>CARRIER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Invoice_year</field-name>
            <column-name>INVOICE_YEAR</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Invoice_number</field-name>
            <column-name>INVOICE_NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByType</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Delivery o WHERE o._Type_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByShipment</method-name>
               <method-params>
                  <method-param>java.lang.String</method-param>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Delivery o WHERE o._Shipment_type = ?1 AND o._Shipment_mode = ?2 AND o._Shipment_number = ?3 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByCarrier</method-name>
               <method-params>
                  <method-param>java.lang.Integer</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Delivery o WHERE o._Carrier_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByInvoice</method-name>
               <method-params>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Delivery o WHERE o._Invoice_year = ?1 AND o._Invoice_number = ?2 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Delivery o]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Clerk</ejb-name>

         <table-name>XAVATEST_CLERK</table-name>

         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>officeNumber</field-name>
            <column-name>OFFICE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>zoneNumber</field-name>
            <column-name>ZONE</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>State</ejb-name>

         <table-name>XAVATEST_STATE</table-name>

         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>id</field-name>
            <column-name>ID</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>SellerLevel</ejb-name>

         <table-name>XAVATEST_SELLERLEVEL</table-name>

         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>id</field-name>
            <column-name>ID</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Product</ejb-name>

         <table-name>XAVATEST_PRODUCT</table-name>

         <cmp-field>
            <field-name>_FamilyNumber</field-name>
            <column-name>FAMILY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_UnitPrice</field-name>
            <column-name>UNITPRICE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>warehouseZoneNumber</field-name>
            <column-name>ZONE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>warehouseNumber</field-name>
            <column-name>WAREHOUSE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_SubfamilyNumber</field-name>
            <column-name>SUBFAMILY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Remarks</field-name>
            <column-name>REMARKS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Product o WHERE 1 = 1]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Family</ejb-name>

         <table-name>XAVATEST@separator@FAMILY</table-name>

         <cmp-field>
            <field-name>oid</field-name>
            <column-name>OID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>ServiceType</ejb-name>

         <table-name>XAVATEST_SERVICETYPE</table-name>

         <cmp-field>
            <field-name>_Family</field-name>
            <column-name>FAMILY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Subfamily</field-name>
            <column-name>SUBFAMILY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>DeliveryPlace</ejb-name>

         <table-name>XAVATEST_DELIVERYPLACE</table-name>

         <cmp-field>
            <field-name>oid</field-name>
            <column-name>OID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Remarks</field-name>
            <column-name>REMARKS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Address</field-name>
            <column-name>ADDRESS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Customer_number</field-name>
            <column-name>CUSTOMER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_PreferredWarehouse_zoneNumber</field-name>
            <column-name>WAREHOUSE_ZONE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_PreferredWarehouse_number</field-name>
            <column-name>WAREHOUSE_NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByCustomer</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM DeliveryPlace o WHERE o._Customer_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByPreferredWarehouse</method-name>
               <method-params>
                  <method-param>java.lang.Integer</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM DeliveryPlace o WHERE o._PreferredWarehouse_number = ?1 AND o._PreferredWarehouse_zoneNumber = ?2 ]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Warehouse</ejb-name>

         <table-name>XAVATEST_WAREHOUSE</table-name>

         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>zoneNumber</field-name>
            <column-name>ZONE</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Seller</ejb-name>

         <table-name>XAVATEST_SELLER</table-name>

         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Level_id</field-name>
            <column-name>LEVEL</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByLevel</method-name>
               <method-params>
                  <method-param>java.lang.String</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Seller o WHERE o._Level_id = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Seller o WHERE 1 = 1]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Customer</ejb-name>

         <table-name>XAVATEST_CUSTOMER</table-name>

         <cmp-field>
            <field-name>_Type</field-name>
            <column-name>TYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Remarks</field-name>
            <column-name>REMARKS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_RelationWithSeller</field-name>
            <column-name>RELATIONSELLER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Photo</field-name>
            <column-name>PHOTO</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Seller_number</field-name>
            <column-name>SELLER_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_AlternateSeller_number</field-name>
            <column-name>ALTERNATESELLER_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Address_zipCode</field-name>
            <column-name>ZIPCODE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Address_street</field-name>
            <column-name>STREET</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Address_city</field-name>
            <column-name>CITY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Address_state_id</field-name>
            <column-name>STATE</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findBySeller</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o WHERE o._Seller_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByAlternateSeller</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o WHERE o._AlternateSeller_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByNumber</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o WHERE o.number = ?1]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByNameLike</method-name>
               <method-params>
                  <method-param>java.lang.String</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o WHERE o._Name like ?1 ORDER BY o._Name desc]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByNameLikeAndrelationWithSeller</method-name>
               <method-params>
                  <method-param>java.lang.String</method-param>
                  <method-param>java.lang.String</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o WHERE o._Name like ?1 and o._RelationWithSeller = ?2 ORDER BY o._Name desc]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findNormalOnes</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o WHERE o._Type = 1]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findSteadyOnes</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o WHERE o._Type = 2]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByStreet</method-name>
               <method-params>
                  <method-param>java.lang.String</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o WHERE o._Address_street = ?1]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Customer o]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Subfamily</ejb-name>

         <table-name>XAVATEST_SUBFAMILY</table-name>

         <cmp-field>
            <field-name>_FamilyNumber</field-name>
            <column-name>FAMILY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>oid</field-name>
            <column-name>OID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Remarks</field-name>
            <column-name>REMARKS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>DeliveryType</ejb-name>

         <table-name>XAVATEST_DELIVERYTYPE</table-name>

         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>InvoiceDetail</ejb-name>

         <table-name>XAVATEST_INVOICEDETAIL</table-name>

         <cmp-field>
            <field-name>_UnitPrice</field-name>
            <column-name>UNITPRICE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>oid</field-name>
            <column-name>OID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Remarks</field-name>
            <column-name>REMARKS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>deliveryDate_day</field-name>
            <column-name>DAYDELIVERY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>deliveryDate_month</field-name>
            <column-name>MONTHDELIVERY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>deliveryDate_year</field-name>
            <column-name>YEARDELIVERY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Quantity</field-name>
            <column-name>QUANTITY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_ServiceType</field-name>
            <column-name>SERVICETYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Product_number</field-name>
            <column-name>PRODUCT_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_SoldBy_number</field-name>
            <column-name>SOLDBY_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Invoice_year</field-name>
            <column-name>INVOICE_YEAR</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Invoice_number</field-name>
            <column-name>INVOICE_NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByProduct</method-name>
               <method-params>
                  <method-param>long</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM InvoiceDetail o WHERE o._Product_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findBySoldBy</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM InvoiceDetail o WHERE o._SoldBy_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByInvoice</method-name>
               <method-params>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM InvoiceDetail o WHERE o._Invoice_year = ?1 AND o._Invoice_number = ?2 ORDER BY o._ServiceType desc]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Product2</ejb-name>

         <table-name>XAVATEST_PRODUCT</table-name>

         <cmp-field>
            <field-name>_UnitPrice</field-name>
            <column-name>UNITPRICE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Warehouse_zoneNumber</field-name>
            <column-name>ZONE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Warehouse_number</field-name>
            <column-name>WAREHOUSE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Family_number</field-name>
            <column-name>FAMILY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Subfamily_number</field-name>
            <column-name>SUBFAMILY</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByWarehouse</method-name>
               <method-params>
                  <method-param>java.lang.Integer</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Product2 o WHERE o._Warehouse_number = ?1 AND o._Warehouse_zoneNumber = ?2 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByFamily</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Product2 o WHERE o._Family_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findBySubfamily</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Product2 o WHERE o._Subfamily_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Product2 o WHERE 1 = 1]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>DeliveryDetail</ejb-name>

         <table-name>XAVATEST_DELIVERYDETAIL</table-name>

         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Delivery_number</field-name>
            <column-name>DELIVERY_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Delivery_type_number</field-name>
            <column-name>DELIVERY_TYPE_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Delivery_invoice_year</field-name>
            <column-name>DELIVERY_INVOICE_YEAR</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Delivery_invoice_number</field-name>
            <column-name>DELIVERY_INVOICE_NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByDelivery</method-name>
               <method-params>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM DeliveryDetail o WHERE o._Delivery_number = ?1 AND o._Delivery_type_number = ?2 AND o._Delivery_invoice_year = ?3 AND o._Delivery_invoice_number = ?4 ]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>AdditionalDetail</ejb-name>

         <table-name>XAVATEST_SERVICEDETAIL</table-name>

         <cmp-field>
            <field-name>counter</field-name>
            <column-name>COUNTER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Subfamily</field-name>
            <column-name>SUBFAMILY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Service_number</field-name>
            <column-name>SERVICE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Type_number</field-name>
            <column-name>TYPE</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByService</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM AdditionalDetail o WHERE o._Service_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByType</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM AdditionalDetail o WHERE o._Type_number = ?1 ]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>TransportCharge</ejb-name>

         <table-name>XAVATEST_TRANSPORTCHARGE</table-name>

         <cmp-field>
            <field-name>_Amount</field-name>
            <column-name>AMOUNT</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Delivery_number</field-name>
            <column-name>DELIVERY_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Delivery_type_number</field-name>
            <column-name>DELIVERY_TYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Delivery_invoice_year</field-name>
            <column-name>DELIVERY_INVOICE_YEAR</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Delivery_invoice_number</field-name>
            <column-name>DELIVERY_INVOICE_NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByDelivery</method-name>
               <method-params>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM TransportCharge o WHERE o._Delivery_number = ?1 AND o._Delivery_type_number = ?2 AND o._Delivery_invoice_year = ?3 AND o._Delivery_invoice_number = ?4 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM TransportCharge o]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Invoice</ejb-name>

         <table-name>XAVATEST_INVOICE</table-name>

         <cmp-field>
            <field-name>_Comment</field-name>
            <column-name>COMMENT</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Date</field-name>
            <column-name>DATE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Paid</field-name>
            <column-name>PAID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>year</field-name>
            <column-name>YEAR</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_VatPercentage</field-name>
            <column-name>VATPERCENTAGE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Customer_number</field-name>
            <column-name>CUSTOMER_NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByCustomer</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Invoice o WHERE o._Customer_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Invoice o WHERE 1 = 1]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findPaidOnes</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Invoice o WHERE o._Paid = 'S']]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findNotPaidOnes</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Invoice o WHERE o._Paid <> 'S']]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Product3</ejb-name>

         <table-name>XAVATEST_PRODUCT3</table-name>

         <cmp-field>
            <field-name>_Comments</field-name>
            <column-name>COMMENTS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Family_oid</field-name>
            <column-name>FAMILY</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByFamily</method-name>
               <method-params>
                  <method-param>java.lang.String</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Product3 o WHERE o._Family_oid = ?1 ]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Shipment</ejb-name>

         <table-name>XAVATEST_SHIPMENT</table-name>

         <cmp-field>
            <field-name>_Type</field-name>
            <column-name>TYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>mode</field-name>
            <column-name>MODE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Shipment o]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Carrier</ejb-name>

         <table-name>XAVATEST_CARRIER</table-name>

         <cmp-field>
            <field-name>_Remarks</field-name>
            <column-name>REMARKS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Warehouse_zoneNumber</field-name>
            <column-name>WAREHOUSE_ZONE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Warehouse_number</field-name>
            <column-name>WAREHOUSE_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_DrivingLicence_type</field-name>
            <column-name>DRIVINGLICENCE_TYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_DrivingLicence_level</field-name>
            <column-name>DRIVINGLICENCE_LEVEL</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByWarehouse</method-name>
               <method-params>
                  <method-param>java.lang.Integer</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Carrier o WHERE o._Warehouse_number = ?1 AND o._Warehouse_zoneNumber = ?2 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByDrivingLicence</method-name>
               <method-params>
                  <method-param>int</method-param>
                  <method-param>java.lang.String</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Carrier o WHERE o._DrivingLicence_level = ?1 AND o._DrivingLicence_type = ?2 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findFellowCarriersOfCarrier</method-name>
               <method-params>
                  <method-param>int</method-param>
                  <method-param>java.lang.Integer</method-param>
                  <method-param>java.lang.Integer</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Carrier o WHERE o._Warehouse_zoneNumber = ?1 AND o._Warehouse_number = ?2 AND NOT (o._Number = ?3) ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Carrier o]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Subfamily2</ejb-name>

         <table-name>XAVATEST_SUBFAMILY2</table-name>

         <cmp-field>
            <field-name>_Remarks</field-name>
            <column-name>REMARKS</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Family_number</field-name>
            <column-name>FAMILY</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByFamily</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Subfamily2 o WHERE o._Family_number = ?1 ]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Office2</ejb-name>

         <table-name>XAVATEST_OFFICE2</table-name>

         <cmp-field>
            <field-name>_Receptionist</field-name>
            <column-name>RECEPTIONIST_OID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>zoneNumber</field-name>
            <column-name>ZONE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_OfficeManager_number</field-name>
            <column-name>MANAGER_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_DefaultCarrier_number</field-name>
            <column-name>CARRIER_NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_MainWarehouse_number</field-name>
            <column-name>WAREHOUSE_NUMBER</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByOfficeManager</method-name>
               <method-params>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Office2 o WHERE o.number = ?1 AND o._OfficeManager_number = ?2 AND o.zoneNumber = ?3 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByDefaultCarrier</method-name>
               <method-params>
                  <method-param>java.lang.Integer</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Office2 o WHERE o._DefaultCarrier_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findByMainWarehouse</method-name>
               <method-params>
                  <method-param>java.lang.Integer</method-param>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Office2 o WHERE o._MainWarehouse_number = ?1 AND o.zoneNumber = ?2 ]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>FilterBySubfamily</ejb-name>

         <table-name>XAVATEST_MOCKTABLE</table-name>

         <cmp-field>
            <field-name>oid</field-name>
            <column-name>OID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_SubfamilyTo_number</field-name>
            <column-name>SUBFAMILYTO</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Subfamily_number</field-name>
            <column-name>SUBFAMILY</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findBySubfamilyTo</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM FilterBySubfamily o WHERE o._SubfamilyTo_number = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findBySubfamily</method-name>
               <method-params>
                  <method-param>int</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM FilterBySubfamily o WHERE o._Subfamily_number = ?1 ]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Service</ejb-name>

         <table-name>XAVATEST_SERVICE</table-name>

         <cmp-field>
            <field-name>_Family</field-name>
            <column-name>FAMILY</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Detail_type</field-name>
            <column-name>TYPE</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Detail_subfamily</field-name>
            <column-name>SUBFAMILY</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Family2</ejb-name>

         <table-name>XAVATEST_FAMILY2</table-name>

         <cmp-field>
            <field-name>_Description</field-name>
            <column-name>DESCRIPTION</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>number</field-name>
            <column-name>NUMBER</column-name>

        </cmp-field>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

      <entity>
         <ejb-name>Receptionist</ejb-name>

         <table-name>XAVATEST_RECEPTIONIST</table-name>

         <cmp-field>
            <field-name>oid</field-name>
            <column-name>OID</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_Name</field-name>
            <column-name>NAME</column-name>

        </cmp-field>
         <cmp-field>
            <field-name>_DeliveryPlace_oid</field-name>
            <column-name>DELIVERYPLACE</column-name>

        </cmp-field>

         <query>
            <query-method>
               <method-name>findByDeliveryPlace</method-name>
               <method-params>
                  <method-param>java.lang.String</method-param>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Receptionist o WHERE o._DeliveryPlace_oid = ?1 ]]></jboss-ql>

	     </query>
         <query>
            <query-method>
               <method-name>findAll</method-name>
               <method-params>
               </method-params>
            </query-method>
			<jboss-ql><![CDATA[SELECT OBJECT(o) FROM Receptionist o]]></jboss-ql>

	     </query>

<!-- jboss 3.2 features -->
<!-- optimistic locking does not express the exclusions needed -->
      </entity>

   </enterprise-beans>

       <type-mappings>
      <type-mapping>
         <name>FirstSQL/J</name>
         <row-locking-template/>
         <pk-constraint-template>PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 || ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substring(?1 FROM ?2 FOR ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>char_length(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>position(?1 IN ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>math.abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>math.sqrt(CAST(?1 AS DOUBLE))</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>BIGINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>REAL</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <!-- or <sql-type>VARCHAR(2147483500)</sql-type> -->
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>DECIMAL</jdbc-type>
            <sql-type>DECIMAL</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <!-- FirstSQL/J only supports directly serializable objects for classes declared with CREATE CLASS -->
            <jdbc-type>LONGVARBINARY</jdbc-type>
            <sql-type>VARCHAR(2147483500)</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>Ingres</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>    
         <pk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 PRIMARY KEY (?3)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>TRUE</true-mapping>
         <false-mapping>FALSE</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>concat(?1,?2)</function-sql>
         </function-mapping>    
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>left(?1,?2)</function-sql>
         </function-mapping>    
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>    
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>length(?1)</function-sql>
         </function-mapping>    
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>locate(?1,?2)</function-sql>
         </function-mapping>    
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>    
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(?1)</function-sql>
         </function-mapping>    
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>    
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <!-- change from bit to integer , 10.12.2002 heb -->
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>INT1</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>INTEGER4</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT4</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>FLOAT8</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>FLOAT8</sql-type>
         </mapping>
<!--
Mapping proposed by Computer Associates, but does not work with JBoss properly
28.03.2003 hou
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>DECIMAL(24,6)</sql-type>
         </mapping>
-->
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>LONG VARCHAR</sql-type>
         </mapping>
      </type-mapping>
     <type-mapping>
      <name>McKoi</name>
      <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
      <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
      <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
      <alias-header-prefix>t</alias-header-prefix>
      <alias-header-suffix>_</alias-header-suffix>
      <alias-max-length>32</alias-max-length>
      <subquery-supported>true</subquery-supported>
      <true-mapping>TRUE</true-mapping>
      <false-mapping>FALSE</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

      <mapping>
         <java-type>java.lang.Boolean</java-type>
         <jdbc-type>BIT</jdbc-type>
         <sql-type>BOOLEAN</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.Byte</java-type>
         <jdbc-type>TINYINT</jdbc-type>
         <sql-type>SMALLINT</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.Short</java-type>
         <jdbc-type>SMALLINT</jdbc-type>
         <sql-type>SMALLINT</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.Integer</java-type>
         <jdbc-type>INTEGER</jdbc-type>
         <sql-type>INTEGER</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.Long</java-type>
         <jdbc-type>BIGINT</jdbc-type>
         <sql-type>BIGINT</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.Float</java-type>
         <jdbc-type>REAL</jdbc-type>
         <sql-type>FLOAT</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.Double</java-type>
         <jdbc-type>DOUBLE</jdbc-type>
         <sql-type>DOUBLE</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.Character</java-type>
         <jdbc-type>CHAR</jdbc-type>
         <sql-type>CHAR</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.String</java-type>
         <jdbc-type>VARCHAR</jdbc-type>
         <sql-type>VARCHAR(64)</sql-type>
      </mapping>
      <mapping>
         <java-type>java.sql.Date</java-type>
         <jdbc-type>DATE</jdbc-type>
         <sql-type>DATE</sql-type>
      </mapping>
      <mapping>
         <java-type>java.sql.Time</java-type>
         <jdbc-type>TIME</jdbc-type>
         <sql-type>TIME</sql-type>
      </mapping>
      <mapping>
         <java-type>java.sql.Timestamp</java-type>
         <jdbc-type>TIMESTAMP</jdbc-type>
         <sql-type>TIMESTAMP</sql-type>
      </mapping>
      <mapping>
         <java-type>java.lang.Object</java-type>
         <jdbc-type>JAVA_OBJECT</jdbc-type>
         <sql-type>JAVA_OBJECT</sql-type>
      </mapping>
     </type-mapping>

      <type-mapping>
         <name>Firebird</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>31</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>SMALLINT default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>SMALLINT default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>NUMERIC(18,0) default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>FLOAT default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE PRECISION default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <!-- The small default length is due to the 128 byte max index key size -->
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(64)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>BLOB</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>InterBase</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>31</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>SMALLINT default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>SMALLINT default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>NUMERIC(18,0) default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>FLOAT default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE PRECISION default 0</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(64)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>VARCHAR(2000)</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>DB2</name>
         <row-locking-template/>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>
		 <function-mapping>
			 <function-name>locate</function-name>
			 <function-sql>locate(CAST(?1 as VARCHAR(254)),
				 CAST(?2 as VaRCHAR(254)),?3)</function-sql>
		 </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
    <!--  DB2 does not appear to support columns of type "byte"
    Regrettably, this means they'll be serialized.
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR(1) FOR BIT DATA</sql-type>
         </mapping>
    -->
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>BIGINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>REAL</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(254)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <!-- this one gives errors with DB2 V8.1
         		and at least the NET driver
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>BLOB(2000)</sql-type>
         </mapping>
         -->
      	<mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>VARBINARY</jdbc-type>
            <sql-type>BLOB(2000)</sql-type>
         </mapping>
      </type-mapping>
      <type-mapping>
         <name>Oracle9i</name>
         <!--
         | Make sure that you have the Oracle 9i version of classes12.jar
         | or you will suffer
         -->
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>30</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 || ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substr(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>length(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>instr(?2, ?1, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>NUMBER(1)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>NUMBER(3)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <!-- <jdbc-type>SMALLINT</jdbc-type> this resulted in a ClassCastException -->
            <sql-type>NUMBER(5)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>NUMBER(10)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>NUMBER(19)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>NUMBER(38,7)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>DECIMAL</jdbc-type>
            <sql-type>NUMBER(38,15)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>NUMBER(38,15)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR2(255)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP(3)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP(9)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>BLOB</jdbc-type>
            <sql-type>BLOB</sql-type>
            <!--
            | Change this from BLOB to RAW(n) if you know your
            | serialized object will be <= n bytes and n <= 2000
            -->
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>Oracle8</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>30</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 || ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substr(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>length(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>instr(?2, ?1, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>NUMBER(1)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>NUMBER(3)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>NUMBER(5)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>NUMBER(10)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>NUMBER(19)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>NUMBER(38,7)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>DECIMAL</jdbc-type>
            <sql-type>NUMBER(38,15)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>NUMBER(38,15)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR2(255)</sql-type>
         </mapping>
         <mapping>
            <!--
            | Note that you lose granularity here
            | Use a numeric type and store milliseconds if you really need it
            -->
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <!--
            | Note that you lose granularity here
            | Use a numeric type and store milliseconds if you really need it
            -->
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>BLOB</jdbc-type>
            <sql-type>BLOB</sql-type>
            <!--
            | Change this from BLOB to RAW(n) if you know your
            | serialized object will be <= n bytes and n <= 2000
            -->
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>Oracle7</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>30</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 || ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substr(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>length(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>instr(?2, ?1, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>NUMBER(1)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>NUMBER(3)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>NUMBER(5)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>NUMBER(10)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>NUMBER(19)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>NUMBER(38,7)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>NUMBER(38,15)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR2(255)</sql-type>
         </mapping>
         <mapping>
            <!--
            | Note that you lose granularity here
            | Use a numeric type and store milliseconds if you really need it
            -->
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <!--
            | Note that you lose granularity here
            | Use a numeric type and store milliseconds if you really need it
            -->
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>LONGVARBINARY</jdbc-type>
            <sql-type>LONG RAW</sql-type>
            <!--
            | Change this from LONG RAW to RAW(n) if you know your
            | serialized object will be <= n bytes and n <= 2000
            | Oracle only permits one LONG type per table
            -->
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>Sybase</name>
         <row-locking-template/>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>30</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>         
         <function-mapping>
         	<function-name>length</function-name>
         	<function-sql>char_length(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>BIT</sql-type>
         </mapping>
    <!-- Current Sybase JDBC drivers (jConnect 5.2) don't support
    byte or short.  Unfortunately they'll be serialized.
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
    -->
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>NUMERIC(38,0)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>REAL</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE PRECISION</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(255)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>SMALLDATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>IMAGE</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>PostgreSQL</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <auto-increment-template>?1</auto-increment-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>TRUE</true-mapping>
         <false-mapping>FALSE</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 || ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substring(?1 FROM ?2 FOR ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>length(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>(CASE position(?1 in substring(?2 from ?3)) WHEN 0 THEN 0 ELSE position(?1 in substring(?2 from ?3)) + ?3 - 1 END)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(CAST(?1 AS double precision))</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>BOOLEAN</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>INT2</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>INT2</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INT4</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>INT8</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT(7)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>FLOAT8</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR(1)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>TEXT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP with time zone</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP with time zone</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>NUMERIC</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>VARBINARY</jdbc-type>
            <sql-type>BYTEA</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>PostgreSQL 7.2</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <auto-increment-template>?1</auto-increment-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>TRUE</true-mapping>
         <false-mapping>FALSE</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 || ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substring(?1 FROM ?2 FOR ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>length(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>(CASE position(?1 in substring(?2 from ?3)) WHEN 0 THEN 0 ELSE position(?1 in substring(?2 from ?3)) + ?3 - 1 END)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(CAST(?1 AS double precision))</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>BOOLEAN</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>INT2</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>INT2</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INT4</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>INT8</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT(7)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>FLOAT8</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR(1)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>TEXT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>NUMERIC</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>VARBINARY</jdbc-type>
            <sql-type>BYTEA</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>Hypersonic SQL</name>
         <row-locking-template/>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <auto-increment-template>?1 IDENTITY</auto-increment-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>(1=1)</true-mapping>
         <false-mapping>(1=0)</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 || ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>SUBSTRING(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lcase(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>LENGTH(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>LOCATE(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>ABS(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>SQRT(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>ucase(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>BIT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <!-- hsqldb only supports directly serializable objects for sql type OBJECT -->
            <jdbc-type>VARBINARY</jdbc-type>
            <sql-type>VARBINARY</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>REAL</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>BIGINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>DECIMAL</jdbc-type>
            <sql-type>DECIMAL</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>PointBase</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>TRUE</true-mapping>
         <false-mapping>FALSE</false-mapping>

         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>BOOLEAN</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>BLOB</jdbc-type>
            <sql-type>BLOB</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>SOLID</name>
         <row-locking-template/>
         <pk-constraint-template>PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>BLOB</jdbc-type>
            <sql-type>BLOB</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>BIT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>BIGINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>mySQL</name>
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <!-- does not work for compound keys <fk-constraint-template>ALTER TABLE ?1 ADD INDEX ind_?3 (?3), ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template> -->
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <auto-increment-template>?1 auto_increment</auto-increment-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>false</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>concat(?1, ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substring(?1 FROM ?2 FOR ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>length(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>locate(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>BLOB</jdbc-type>
            <sql-type>LONGBLOB</sql-type>
            <!--
            | Change this from LONGBLOB to BLOB if you know your
            | serialized object will be <= 2^16 bytes
            -->
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
            <!--
            | This type is problematical because mysql does not have any
            | date/time types that store milliseconds. You should avoid it.
            -->
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>BIGINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(250) BINARY</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME</sql-type>
            <!--
            | Note that you lose granularity here
            | Use a numeric type and store milliseconds if you really need it
            -->
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>MS SQLSERVER</name>
         <row-locking-template>SELECT ?1 FROM ?2 with (updlock) WHERE ?3 ORDER BY ?4</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <auto-increment-template>?1 IDENTITY</auto-increment-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 + ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substring(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>len(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>charindex(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>DECIMAL</jdbc-type>
            <sql-type>DECIMAL(20)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>IMAGE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>
         <mapping>
            <!--
            | Note that you lose granularity here
            | Use a numeric type and store milliseconds if you really need it
            -->
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>BIT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>MS SQLSERVER2000</name>
         <row-locking-template>SELECT ?1 FROM ?2 with (xlock) WHERE ?3 ORDER BY ?4</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <auto-increment-template>?1 IDENTITY</auto-increment-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>concat</function-name>
            <function-sql>(?1 + ?2)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>substring</function-name>
            <function-sql>substring(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>lcase</function-name>
            <function-sql>lower(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>length</function-name>
            <function-sql>len(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>locate</function-name>
            <function-sql>charindex(?1, ?2, ?3)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>abs</function-name>
            <function-sql>abs(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>sqrt</function-name>
            <function-sql>sqrt(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>ucase</function-name>
            <function-sql>upper(?1)</function-sql>
         </function-mapping>
         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>BIGINT</sql-type>
         </mapping>

         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>LONGVARBINARY</jdbc-type>
            <sql-type>IMAGE</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>

         <mapping>
            <!--
            | Note that you lose granularity here
            | Use a numeric type and store milliseconds if you really need it
            -->
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>

         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>

         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>

         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>BIT</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>REAL</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>DB2/400</name>
         <row-locking-template/>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR(1)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
    <!-- Apparent DB2/400 doesn't handle Byte type either
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR(1) FOR BIT DATA</sql-type>
         </mapping>
    -->
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR(5)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>VARCHAR(4096) FOR BIT DATA</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>SapDB</name>
         <!-- SapDB 7.3 might require '... UPDATE OF ?1' in the row-locking-template -->
         <!-- as is works with SapDB 7.4 -->
         <row-locking-template>SELECT ?1 FROM ?2 WHERE ?3 ORDER BY ?4 FOR UPDATE</row-locking-template>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD FOREIGN KEY ?2 (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>LONG BYTE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>CHAR BYTE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>BOOLEAN</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>FLOAT</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE PRECISION</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>DECIMAL</jdbc-type>
            <sql-type>DECIMAL(20)</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>Cloudscape</name>
         <row-locking-template/>
         <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>32</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>LONGVARCHAR</jdbc-type>
            <sql-type>LONG VARCHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>BOOLEAN</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>TINYINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>LONGINT</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>REAL</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE PRECISION</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>LONGVARCHAR</jdbc-type>
            <sql-type>LONG VARCHAR</sql-type>
         </mapping>
         <!-- NOTE: This alternative mapping has been suggested for cloudscape
         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(256)</sql-type>
         </mapping> -->
         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>
         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>TIMESTAMP</sql-type>
         </mapping>
         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>LONG VARBINARY</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
         <name>InformixDB</name>
         <row-locking-template>select ?1 from ?2 where ?3 order by ?4 for update</row-locking-template>
         <pk-constraint-template>PRIMARY KEY (?2) CONSTRAINT ?1</pk-constraint-template>
         <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT FOREIGN KEY (?3) REFERENCES ?4 (?5) CONSTRAINT ?2</fk-constraint-template>
         <alias-header-prefix>t</alias-header-prefix>
         <alias-header-suffix>_</alias-header-suffix>
         <alias-max-length>8</alias-max-length>
         <subquery-supported>true</subquery-supported>
         <true-mapping>1</true-mapping>
         <false-mapping>0</false-mapping>

         <function-mapping>
            <function-name>count</function-name>
            <function-sql>count(?1)</function-sql>
         </function-mapping>

         <mapping>
            <java-type>java.lang.Character</java-type>
            <jdbc-type>CHAR</jdbc-type>
            <sql-type>CHAR(1)</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.String</java-type>
            <jdbc-type>VARCHAR</jdbc-type>
            <sql-type>VARCHAR(255,0)</sql-type>
         </mapping>

         <mapping>
            <java-type>java.math.BigDecimal</java-type>
            <jdbc-type>NUMERIC</jdbc-type>
            <sql-type>DECIMAL</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Boolean</java-type>
            <jdbc-type>BIT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Integer</java-type>
            <jdbc-type>INTEGER</jdbc-type>
            <sql-type>INTEGER</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Long</java-type>
            <jdbc-type>BIGINT</jdbc-type>
            <sql-type>NUMERIC(18,0)</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Float</java-type>
            <jdbc-type>REAL</jdbc-type>
            <sql-type>FLOAT</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Double</java-type>
            <jdbc-type>DOUBLE</jdbc-type>
            <sql-type>DOUBLE PRECISION</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Byte</java-type>
            <jdbc-type>TINYINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Short</java-type>
            <jdbc-type>SMALLINT</jdbc-type>
            <sql-type>SMALLINT</sql-type>
         </mapping>

         <mapping>
            <java-type>java.util.Date</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME YEAR TO FRACTION(3)</sql-type>
         </mapping>

         <mapping>
            <java-type>java.sql.Date</java-type>
            <jdbc-type>DATE</jdbc-type>
            <sql-type>DATE</sql-type>
         </mapping>

         <mapping>
            <java-type>java.sql.Time</java-type>
            <jdbc-type>TIME</jdbc-type>
            <sql-type>TIME</sql-type>
         </mapping>

         <mapping>
            <java-type>java.sql.Timestamp</java-type>
            <jdbc-type>TIMESTAMP</jdbc-type>
            <sql-type>DATETIME YEAR TO FRACTION(3)</sql-type>
         </mapping>

         <mapping>
            <java-type>java.lang.Object</java-type>
            <jdbc-type>JAVA_OBJECT</jdbc-type>
            <sql-type>BYTE</sql-type>
         </mapping>
      </type-mapping>

      <type-mapping>
          <name>Mimer SQL</name>
          <row-locking-template/>
          <pk-constraint-template>CONSTRAINT ?1 PRIMARY KEY (?2)</pk-constraint-template>
          <fk-constraint-template>ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)</fk-constraint-template>
          <alias-header-prefix>t</alias-header-prefix>
          <alias-header-suffix>_</alias-header-suffix>
          <alias-max-length>32</alias-max-length>
          <subquery-supported>true</subquery-supported>
          <true-mapping>1</true-mapping>
          <false-mapping>0</false-mapping>

          <mapping>
             <java-type>java.lang.Boolean</java-type>
             <jdbc-type>BIT</jdbc-type>
             <sql-type>SMALLINT</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.Byte</java-type>
             <jdbc-type>TINYINT</jdbc-type>
             <sql-type>SMALLINT</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.Short</java-type>
             <jdbc-type>SMALLINT</jdbc-type>
             <sql-type>SMALLINT</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.Integer</java-type>
             <jdbc-type>INTEGER</jdbc-type>
             <sql-type>INTEGER</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.Long</java-type>
             <jdbc-type>BIGINT</jdbc-type>
             <sql-type>BIGINT</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.Float</java-type>
             <jdbc-type>REAL</jdbc-type>
             <sql-type>REAL</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.Double</java-type>
             <jdbc-type>DOUBLE</jdbc-type>
             <sql-type>DOUBLE PRECISION</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.Character</java-type>
             <jdbc-type>CHAR</jdbc-type>
             <sql-type>CHAR</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.String</java-type>
             <jdbc-type>VARCHAR</jdbc-type>
             <sql-type>VARCHAR(5000)</sql-type>
          </mapping>

          <mapping>
             <java-type>java.sql.Date</java-type>
             <jdbc-type>DATE</jdbc-type>
             <sql-type>DATE</sql-type>
          </mapping>

          <mapping>
             <java-type>java.sql.Time</java-type>
             <jdbc-type>TIME</jdbc-type>
             <sql-type>TIME</sql-type>
          </mapping>

          <mapping>
             <java-type>java.sql.Timestamp</java-type>
             <jdbc-type>TIMESTAMP</jdbc-type>
             <sql-type>TIMESTAMP</sql-type>
          </mapping>

          <mapping>
             <java-type>java.lang.Object</java-type>
             <jdbc-type>JAVA_OBJECT</jdbc-type>
             <sql-type>VARBINARY(5000)</sql-type>
          </mapping>
       </type-mapping>
   </type-mappings>

</jbosscmp-jdbc>
