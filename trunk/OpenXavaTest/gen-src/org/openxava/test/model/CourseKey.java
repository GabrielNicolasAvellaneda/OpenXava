/*
 * Generated by XDoclet - Do not edit!
 */
package org.openxava.test.model;

import java.util.*;

import org.openxava.util.*;

/**
 * Primary key for Course.
 */
public class CourseKey
   extends java.lang.Object
   implements java.io.Serializable
{

   private static final long serialVersionUID = 1L;

   public int number;
   public int year;

   public CourseKey()
   {
   }

   public CourseKey( int number,int year )
   {
      this.number = number;
      this.year = year;
   }

   public int getNumber()
   {
      return number;
   }
   public int getYear()
   {
      return year;
   }

   public void setNumber(int number)
   {
      this.number = number;
   }
   public void setYear(int year)
   {
      this.year = year;
   }

   public int hashCode()
   {
      int _hashCode = 0;
         _hashCode += (int)this.number;
         _hashCode += (int)this.year;

      return _hashCode;
   }

   public boolean equals(Object obj)
   {
      if( !(obj instanceof org.openxava.test.model.CourseKey) )
         return false;

      org.openxava.test.model.CourseKey pk = (org.openxava.test.model.CourseKey)obj;
      boolean eq = true;

      if( obj == null )
      {
         eq = false;
      }
      else
      {
         eq = eq && this.number == pk.number;
         eq = eq && this.year == pk.year;
      }

      return eq;
   }

   /**
    * Create from a string with the format of toString() method
    */
   public static CourseKey createFromString(String string) throws IllegalArgumentException, IllegalAccessException {
      StringTokenizer st = new StringTokenizer(string, "[.]");
      CourseKey key = new CourseKey();
      java.lang.reflect.Field [] fields = key.getClass().getFields();
      Arrays.sort(fields, FieldComparator.getInstance());
      for (int i = 0; i < fields.length; i++) {
         String v = st.nextToken();
         Class type = fields[i].getType();
         Object value = null;
         if (!type.equals(String.class)) {
            value = Strings.toObject(type, v);
         }
         else {
            value = string;
         }
         fields[i].set(key, value);
      }
      return key;
   }

   /** @return String representation of this pk in the form of [.field1.field2.field3]. */
   public String toString()
   {
      StringBuffer toStringValue = new StringBuffer("[.");
      java.lang.reflect.Field [] fields = getClass().getFields();
      Arrays.sort(fields, FieldComparator.getInstance());
      for (int i=0; i < fields.length; i++) {
      	try {
      	 	toStringValue.append(fields[i].get(this)).append('.');
      	}
      	catch (IllegalAccessException ex) {
      	 	ex.printStackTrace();
      	 	toStringValue.append(" ").append('.');
      	}
      }
      toStringValue.append(']');
      return toStringValue.toString();
   }

}
