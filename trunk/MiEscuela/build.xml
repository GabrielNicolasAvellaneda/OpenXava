<?xml version="1.0"?>

<project name="MiEscuela" default="todo" basedir=".">

	<property name="project" value="MiEscuela" />
	<property name="package" value="escuela"/>
	<!-- 
	model.package por defecto es 'model', pero aquí ponemos un 'modelo'
	más castizo. Si siempre desarrollamos en español podemos poner esto openxava.properties
	-->
	<property name="model.package" value="modelo"/>	
	<property name="configuration" value="tomcat-hypersonic" />
	<!-- property name="configuration" value="jboss-hypersonic" /-->		
	<!-- property name="configuration" value="websphere-as400" /-->
	<property file="../openxava.properties"/>
	<property file="${configuration}.properties"/>
	<property name="datasource" value="MySchoolDS"/>
	<property name="separator" value="_"/>
		
	<!-- Generación incremental -->	
	<target name="generarCodigo">
		<ant antfile="../OpenXava/build.xml" target="generateHibernate"/>		
	</target>	
	
	<!-- Genera todo el codigo -->
	<target name="regenerateCode">
		<ant antfile="../OpenXava/build.xml" target="regenerateHibernate"/>		
	</target>	
		
	<!-- Construye y despliega la aplicación en formato .war -->	
	<target name="desplegarWar">
		<ant antfile="../OpenXava/build.xml" target="deployWar"/>
	</target>				
	
	<!-- Reconstruye la aplicación, después de esto todo el contenido de 'web' esta listo para ser desplegado -->
	<target name="reconstruir">
		<ant antfile="../OpenXava/build.xml" target="prepareWar"/>
	</target>
	
	<!--
	Si trabajas con Eclipse WTP añade esta tarea al constructor (builder) para este proyecto
	-->
	<target name="wtpBuild">		
		<ant antfile="../OpenXava/build.xml" target="wtpBuild"/>
	</target>		
	
	<!--
	Construye la aplicación y la despliega en formato portlets. 
	Regenera todos los archivos PSML (para JetSpeed2)
	-->		
	<target name="redesplegarPortlets"> 
		<touch file="../${project}/xava/aplicacion.xml"/>
		<ant antfile="../OpenXava/build.xml" target="deployPortlets"/>
	</target>
		
	<!-- 
	Construye la aplicación y la despliega en formato portlets. 
	Regenera los archivos PSML (para JetSpeed2) solo si aplicacion.xml ha cambiado
	-->			
	<target name="desplegarPortlets"> 
		<ant antfile="../OpenXava/build.xml" target="deployPortlets"/>
	</target>		
	
	<!-- 
	Ejecuta todos los procesos para ver nuestra aplicación en marcha.
	Pensada para ser usada desde línea de órdenes.
	-->		
	<target name="todo">
		<ant antfile="../OpenXava/build.xml" target="generateHibernate"/>
		<ant antfile="../OpenXava/build.xml" target="compile"/>
		<!-- 'deploy' para desplegar en un directorio (descomprimido) -->
		<ant antfile="../OpenXava/build.xml" target="deploy"/>
		<!-- 'deployWar' para desplegar como un archivo .war 
		<ant antfile="../OpenXava/build.xml" target="deployWar"/>
		-->
	</target>
	
	<!--
	Se conecta a tu base de datos y actualizar el esquema para que conincida con 
	el actual de tu aplicación.	
	(También puedes usar directamente la tarea ant 'schemaupdate' de hibernate)
	-->
	<target name="actualizarEsquema">
		<ant antfile="../OpenXava/build.xml" target="updateSchema">			
			<property name="schema.config.file" value="hibernate/hibernate-junit.cfg.xml"/>
			<property name="schema.path" value="../OpenXavaTest/lib/hsqldb.jar"/>
		</ant>
	</target>	

	<!--
	Crea un archivo sql (en data/schema-export.sql) que puedes usar para crear la
	base de datos para tu aplicación. 
	(También puedes usar directamente la tarea ant 'schemaupdate' de hibernate)
	-->	
	<target name="exportarEsquema">
		<ant antfile="../OpenXava/build.xml" target="exportSchema">
			<property name="schema.config.file" value="hibernate/hibernate-junit.cfg.xml"/>
			<property name="schema.path" value="../OpenXavaTest/lib/hsqldb.jar"/>
		</ant>
	</target>	
						
</project>
