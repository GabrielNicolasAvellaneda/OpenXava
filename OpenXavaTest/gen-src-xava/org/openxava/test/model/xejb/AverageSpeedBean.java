
// File generated by OpenXava: Tue Jul 22 16:34:17 CEST 2008
// Archivo generado por OpenXava: Tue Jul 22 16:34:17 CEST 2008

// WARNING: NO EDIT
// OJO: NO EDITAR
// Component: AverageSpeed		Entity/Entidad

package org.openxava.test.model.xejb;

import java.util.*;
import java.math.*;
import javax.ejb.*;
import javax.rmi.PortableRemoteObject;

import org.openxava.ejbx.*;
import org.openxava.util.*;
import org.openxava.component.*;
import org.openxava.model.meta.*;
import org.openxava.validators.ValidationException;

import org.openxava.test.model.*;


/**
 * @ejb:bean name="AverageSpeed" type="CMP" jndi-name="@subcontext@/ejb/org.openxava.test.model/AverageSpeed" reentrant="false" view-type="remote"
 * @ejb:interface extends="org.openxava.ejbx.EJBReplicable, org.openxava.test.model.IAverageSpeed"
 * @ejb:data-object extends="java.lang.Object"
 * @ejb:home extends="javax.ejb.EJBHome"
 * @ejb:pk extends="java.lang.Object"
 *
 * @ejb.value-object name="AverageSpeed" match="persistentCalculatedAndAggregate"
 *   
 * @ejb:env-entry name="DATA_SOURCE" type="java.lang.String" value="jdbc/DataSource"
 * @ejb:resource-ref  res-name="jdbc/DataSource" res-type="javax.sql.DataSource"  res-auth="Container" jndi-name="jdbc/@datasource@"
 * @jboss:resource-ref  res-ref-name="jdbc/DataSource" resource-name="jdbc/DataSource"
 * 	
 * @ejb:finder signature="Collection findByVehicle(java.lang.String oid)" query="SELECT OBJECT(o) FROM AverageSpeed o WHERE o._Vehicle_oid = ?1 ORDER BY o.oid" view-type="remote" result-type-mapping="Remote"
 * @jboss:query signature="Collection findByVehicle(java.lang.String oid)" query="SELECT OBJECT(o) FROM AverageSpeed o WHERE o._Vehicle_oid = ?1 ORDER BY o.oid" 	
 * @ejb:finder signature="Collection findByDriver(java.lang.Integer number)" query="SELECT OBJECT(o) FROM AverageSpeed o WHERE o._Driver_number = ?1 ORDER BY o.oid" view-type="remote" result-type-mapping="Remote"
 * @jboss:query signature="Collection findByDriver(java.lang.Integer number)" query="SELECT OBJECT(o) FROM AverageSpeed o WHERE o._Driver_number = ?1 ORDER BY o.oid" 	
 * @ejb:finder signature="AverageSpeed findByOid(java.lang.String oid)" query="SELECT OBJECT(o) FROM AverageSpeed o WHERE o.oid = ?1" view-type="remote" result-type-mapping="Remote"
 * @jboss:query signature="AverageSpeed findByOid(java.lang.String oid)" query="SELECT OBJECT(o) FROM AverageSpeed o WHERE o.oid = ?1" 
 * 
 * @jboss:table-name "XAVATEST.AVERAGESPEED"
 *
 * @author Javier Paniza
 */
abstract public class AverageSpeedBean extends EJBReplicableBase 
			implements org.openxava.test.model.IAverageSpeed, EntityBean {	
			
	private boolean creating = false;		
	private boolean modified = false;

	// Create 

	/**
	 * @ejb:create-method
	 */	 
	public org.openxava.test.model.AverageSpeedKey ejbCreate(Map values) 
		throws
			CreateException,
			ValidationException {
		initMembers();	
		creating = true;	
		modified = false;
		executeSets(values); 
			
		return null;
	} 
	public void ejbPostCreate(Map values) 
		throws
			CreateException,
			ValidationException { 
	} 
	
	/**
	 * @ejb:create-method
	 */	 
	public org.openxava.test.model.AverageSpeedKey ejbCreate(org.openxava.test.model.AverageSpeedData data) 
		throws
			CreateException,
			ValidationException {
		initMembers();	
		creating = true;	
		modified = false;
		setData(data); 
		setOid(data.getOid()); 
			
		return null;
	} 
	public void ejbPostCreate(org.openxava.test.model.AverageSpeedData data) 
		throws
			CreateException,
			ValidationException { 			
	}
	
	
	/**
	 * @ejb:create-method
	 */	 
	public org.openxava.test.model.AverageSpeedKey ejbCreate(org.openxava.test.model.AverageSpeedValue value) 
		throws
			CreateException,
			ValidationException {
		initMembers();	
		creating = true;	
		modified = false;
		setAverageSpeedValue(value); 
		setOid(value.getOid()); 
			
		return null;
	} 
	public void ejbPostCreate(org.openxava.test.model.AverageSpeedValue value) 
		throws
			CreateException,
			ValidationException { 			
	}
	
	public void ejbLoad() {
		creating = false;
		modified = false; 
	}
	
	public void ejbStore() {
		if (creating) {
			creating = false;
			return;
		}
		if (!modified) return; 
		
		modified = false;
	} 	
	

	public void ejbRemove() throws RemoveException { 						
	} 	
	
	// Properties/Propiedades 
	private static org.openxava.converters.IConverter speedConverter;
	private org.openxava.converters.IConverter getSpeedConverter() {
		if (speedConverter == null) {
			try {
				speedConverter = (org.openxava.converters.IConverter) 
					getMetaModel().getMapping().getConverter("speed");
			}
			catch (Exception ex) {
				ex.printStackTrace();
				throw new EJBException(XavaResources.getString("generator.create_converter_error", "speed"));
			}
			
		}	
		return speedConverter;
	} 
	/**	 
	 * @ejb:persistent-field
	 * 
	 * @jboss:column-name "SPEED"
	 */
	public abstract java.lang.Integer get_Speed();
	public abstract void set_Speed(java.lang.Integer newSpeed); 	
	
	/**
	 * @ejb.value-object match="persistentCalculatedAndAggregate"
	 * @ejb:interface-method
	 */
	public int getSpeed() {
		try {
			return ((Integer) getSpeedConverter().toJava(get_Speed())).intValue();
		}
		catch (org.openxava.converters.ConversionException ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("generator.conversion_error", "Speed", "AverageSpeed", "int"));
		}
	}
	
	/**
	 * @ejb:interface-method
	 */
	public void setSpeed(int newSpeed) {
		try { 
			this.modified = true; 
			set_Speed((java.lang.Integer) getSpeedConverter().toDB(new Integer(newSpeed)));
		}
		catch (org.openxava.converters.ConversionException ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("generator.conversion_error", "Speed", "AverageSpeed", "int"));
		}		
	} 
	/**
	 * @ejb:interface-method
	 * @ejb:persistent-field
	 * @ejb:pk-field
	 * @ejb.value-object match="persistentCalculatedAndAggregate"
	 *
	 * @jboss:column-name "OID"
	 */
	public abstract String getOid();
	/**
	  * 
	  */
	public abstract void setOid(String newOid); 

	// Colecciones/Collections		

	// References/Referencias 

	// Vehicle : Entity reference/Referencia a entidad
	
	/**
	 * @ejb:interface-method
	 */
	public org.openxava.test.model.IVehicle getVehicle() {
		try {		
			return getVehicleHome().findByPrimaryKey(getVehicleKey());
		}
		catch (ObjectNotFoundException ex) {
			return null;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("get_reference_error", "Vehicle", "AverageSpeed"));
		}		
	}	
	
	
	/**
	 * @ejb:interface-method
	 */
	public org.openxava.test.model.VehicleRemote getVehicleRemote() {
		return (org.openxava.test.model.VehicleRemote) getVehicle();
	}
	
	/**
	 * @ejb:interface-method
	 */
	public void setVehicle(org.openxava.test.model.IVehicle newVehicle) { 
		this.modified = true; 
		try {	
			if (newVehicle == null) setVehicleKey(null);
			else {
				if (newVehicle instanceof org.openxava.test.model.Vehicle) {
					throw new IllegalArgumentException(XavaResources.getString("pojo_to_ejb_illegal"));
				}
				org.openxava.test.model.VehicleRemote remote = (org.openxava.test.model.VehicleRemote) newVehicle;
				setVehicleKey((org.openxava.test.model.VehicleKey) remote.getPrimaryKey());
			}	
		}
		catch (IllegalArgumentException ex) {
			throw ex;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("set_reference_error", "Vehicle", "AverageSpeed"));
		}
	}
	
	/**
	 * @ejb:interface-method
	 */
	public org.openxava.test.model.VehicleKey getVehicleKey() {				
		org.openxava.test.model.VehicleKey key = new org.openxava.test.model.VehicleKey(); 
		key.oid = getVehicle_oid();		
		return key;
	}	
	
	/**
	 * @ejb:interface-method
	 */
	public void setVehicleKey(org.openxava.test.model.VehicleKey key) { 
		this.modified = true; 		
		if (key == null) {
			key = new org.openxava.test.model.VehicleKey(); 
			setVehicle_oid(key.oid);					
		}
		else { 
			setVehicle_oid(key.oid);		
		}
	}
	/**		
	 * @ejb:persistent-field
	 * 
	 * @jboss:column-name "VEHICLE_OID"
	 */
	public abstract String get_Vehicle_oid();
	public abstract void set_Vehicle_oid(String newVehicle_oid);

	/**		
	 * @ejb:interface-method
	 * @ejb.value-object match="persistentCalculatedAndAggregate"
	 */
	public String getVehicle_oid() { 
		return get_Vehicle_oid(); 
	}
	public void setVehicle_oid(String newVehicle_oid) { 
		set_Vehicle_oid(newVehicle_oid); 	
	} 

	private org.openxava.test.model.VehicleHome vehicleHome;	
	private org.openxava.test.model.VehicleHome getVehicleHome() throws Exception{
		if (vehicleHome == null) {
			vehicleHome = (org.openxava.test.model.VehicleHome) PortableRemoteObject.narrow(
			 		BeansContext.get().lookup("ejb/org.openxava.test.model/Vehicle"),
			 		org.openxava.test.model.VehicleHome.class);			 		
		}
		return vehicleHome;
	} 

	// Driver : Entity reference/Referencia a entidad
	
	/**
	 * @ejb:interface-method
	 */
	public org.openxava.test.model.IDriver getDriver() {
		try {		
			return getDriverHome().findByPrimaryKey(getDriverKey());
		}
		catch (ObjectNotFoundException ex) {
			return null;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("get_reference_error", "Driver", "AverageSpeed"));
		}		
	}	
	
	
	/**
	 * @ejb:interface-method
	 */
	public org.openxava.test.model.DriverRemote getDriverRemote() {
		return (org.openxava.test.model.DriverRemote) getDriver();
	}
	
	/**
	 * @ejb:interface-method
	 */
	public void setDriver(org.openxava.test.model.IDriver newDriver) { 
		this.modified = true; 
		try {	
			if (newDriver == null) setDriverKey(null);
			else {
				if (newDriver instanceof org.openxava.test.model.Driver) {
					throw new IllegalArgumentException(XavaResources.getString("pojo_to_ejb_illegal"));
				}
				org.openxava.test.model.DriverRemote remote = (org.openxava.test.model.DriverRemote) newDriver;
				setDriverKey((org.openxava.test.model.DriverKey) remote.getPrimaryKey());
			}	
		}
		catch (IllegalArgumentException ex) {
			throw ex;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("set_reference_error", "Driver", "AverageSpeed"));
		}
	}
	
	/**
	 * @ejb:interface-method
	 */
	public org.openxava.test.model.DriverKey getDriverKey() {				
		org.openxava.test.model.DriverKey key = new org.openxava.test.model.DriverKey(); 
		key._Number = get_Driver_number();		
		return key;
	}	
	
	/**
	 * @ejb:interface-method
	 */
	public void setDriverKey(org.openxava.test.model.DriverKey key) { 
		this.modified = true; 		
		if (key == null) {
			key = new org.openxava.test.model.DriverKey(); 
			setDriver_number(key._Number);					
		}
		else { 
			set_Driver_number(key._Number);		
		}
	}
	/**		
	 * @ejb:persistent-field
	 * 
	 * @jboss:column-name "DRIVER_NUMBER"
	 */
	public abstract java.lang.Integer get_Driver_number();
	public abstract void set_Driver_number(java.lang.Integer newDriver_number);

	/**		
	 * @ejb:interface-method
	 * @ejb.value-object match="persistentCalculatedAndAggregate"
	 */
	public java.lang.Integer getDriver_number() { 
		return get_Driver_number(); 
	}
	public void setDriver_number(java.lang.Integer newDriver_number) { 
		set_Driver_number(newDriver_number); 	
	} 

	private org.openxava.test.model.DriverHome driverHome;	
	private org.openxava.test.model.DriverHome getDriverHome() throws Exception{
		if (driverHome == null) {
			driverHome = (org.openxava.test.model.DriverHome) PortableRemoteObject.narrow(
			 		BeansContext.get().lookup("ejb/org.openxava.test.model/Driver"),
			 		org.openxava.test.model.DriverHome.class);			 		
		}
		return driverHome;
	} 

	// Methods/Metodos 

	private static MetaModel metaModel;
	public MetaModel getMetaModel() throws XavaException {
		if (metaModel == null) {
			metaModel = MetaComponent.get("AverageSpeed").getMetaEntity(); 	
		}
		return metaModel;
	}
	
	
	/**
	 * @ejb:interface-method
	 */	
	public abstract org.openxava.test.model.AverageSpeedData getData();		
	
	/**
	 * @ejb:interface-method
	 */		
	public abstract void setData(org.openxava.test.model.AverageSpeedData data);
	
	/**
	 * @ejb:interface-method
	 */	
	public abstract org.openxava.test.model.AverageSpeedValue getAverageSpeedValue();		
	
	/**
	 * @ejb:interface-method
	 */		
	public abstract void setAverageSpeedValue(org.openxava.test.model.AverageSpeedValue value);
	
	public void setEntityContext(javax.ejb.EntityContext ctx) {
		super.setEntityContext(ctx);
	}
	public void unsetEntityContext() {
		super.unsetEntityContext();
	} 

	private void initMembers() { 
		setOid(null); 
		setSpeed(0); 
		setVehicleKey(null); 
		setDriverKey(null); 	
	} 		
}