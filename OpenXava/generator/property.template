#declare import="org.openxava.util.Strings"#
#declare import="org.openxava.util.XavaException"#
#declare import="org.openxava.model.meta.*"#
#declare import="org.openxava.generators.*"#
#declare import="org.openxava.calculators.*"#
#declare import="org.openxava.util.meta.MetaSet"#
#declare import="org.openxava.mapping.*"#

#declarations

private String getExcepcion() {
	return metaModel.isGenerateJDO()?"JDOException":"EJBException";
}

private MetaProperty property=null;
public void setProperty(MetaProperty property) {
	this.property = property;
}

private IMetaModel metaModel=null;
private ModelMapping modelMapping=null;
public void setMetaModel(IMetaModel metaModel) throws XavaException {
	this.metaModel = metaModel;
	if (metaModel instanceof MetaAggregateBean) {
		this.modelMapping = metaModel.getMetaComponent().getEntityMapping();
	}
	else {
		this.modelMapping = metaModel.getMapping();
	}	
}

private boolean attributeIsPublic = false;
private String attributeAccessLevel = "private";
public void setAttributePublic(boolean attributeIsPublic) {
	this.attributeIsPublic = attributeIsPublic;
	this.attributeAccessLevel = attributeIsPublic?"public":"private";
}

private boolean isPublic = true;
private String propertyAccessLevel = "public";
public void setPublic(boolean isPublic) {
	this.isPublic = isPublic;
	this.propertyAccessLevel = isPublic?"public":"private";
}
public static void generate(XPathContext context, ProgramWriter out, MetaProperty property) throws XavaException {
	generate(context, out, property, true);
}

public static void generatePrivate(XPathContext context, ProgramWriter out, MetaProperty property) throws XavaException {
	generate(context, out, property, false);
}


private static void generate(XPathContext context, ProgramWriter out, MetaProperty property, boolean isPublic) throws XavaException {
	PropertyPG pg = new PropertyPG();
	pg.setProperty(property);
	pg.setMetaModel(property.getMetaModel());
	pg.setPublic(isPublic);
	pg.generate(context, out);
}


# 

# 
	if (GeneratorFactory.has(property)) {
		IPropertyCodeGenerator generator = GeneratorFactory.create(property);
		String propertyCode = generator.generate();
# 
	#(propertyCode)#	
# 		
		return true;
	}
	String propertyName = Strings.firstUpper(property.getName());	
	String type = property.getTypeName();	
	String get = type.equals("boolean")?"is":"get";	
	String tagValueObject = isPublic?"@ejb.value-object match=\"persistentCalculatedAndAggregate\"":"";
	String tagInterfaceMethod = isPublic?"@ejb:interface-method":"";
	if (property.isCalculated()) {
		// Calculateds
	# 	
	/**
	 * #(tagValueObject)#
	 * #(tagInterfaceMethod)#
	 */
	public #(type)# #(get)##(propertyName)#() {
		try {
			# 
			MetaCalculator calculator = property.getMetaCalculator();
			String calculatorClass = calculator.getClassName();
			# 		
			#(calculatorClass)# #(property.getName())#Calculator= (#(calculatorClass)#)
				getMetaModel().getMetaProperty("#(property.getName())#").getMetaCalculator().getCalculator();
			# 	
			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
			while (itSets.hasNext()) {
				MetaSet set = (MetaSet) itSets.next();
				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
				String propertyNameFrom = set.getPropertyNameFrom();
				MetaProperty p = metaModel.getMetaProperty(propertyNameFrom);				
				if (propertyNameFrom.indexOf('.') >= 0) {
					if (p.isKey() || p.getMetaModel() instanceof MetaAggregate) {
						propertyNameFrom = Strings.firstUpper(Strings.change(propertyNameFrom, ".", "_"));
					}
					else {
						StringTokenizer st = new StringTokenizer(propertyNameFrom, ".");
						String ref = st.nextToken();
						String pro = st.nextToken();
						propertyNameFrom = Strings.firstUpper(ref) + "().get" + Strings.firstUpper(pro);
					}
				}
				else {
					propertyNameFrom = Strings.firstUpper(propertyNameFrom);
				}
				String getPropertyFrom = "boolean".equals(p.getTypeName())?"is":"get";
				String value = set.getValue();
				if (set.hasValue()) {
			# 
			#(property.getName())#Calculator.set#(propertyNameInCalculator)#("#(value)#");
			# 
				} else {	
			#  	
			#(property.getName())#Calculator.set#(propertyNameInCalculator)#(#(getPropertyFrom)##(propertyNameFrom)#());
			# 	}} // else/sets 	 
			if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
			# 
				#(property.getName())#Calculator.setEntity(this);
			# } 
			if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
			# 
				#(property.getName())#Calculator.setConnectionProvider(getPortableContext());			
			# 			
			}  
			String calculateValueSentence = property.getName() + "Calculator.calculate()";		
			# 
			return #(Generators.generateCast(property.getTypeName(), calculateValueSentence))#;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new #(getExcepcion())#(XavaResources.getString("generator.calculate_value_error", "#(propertyName)#", "#(metaModel.getName())#", ex.getLocalizedMessage()));
		}
	}
	public void set#(propertyName)#(#(type)# new#(propertyName)#) {
		// for it is in value object
		// para que aparezca en los value objects
	}
	# 
	}
	else {
		// Not calculateds
		String column = modelMapping.getColumn(property.getName());			
		PropertyMapping propertyMapping = modelMapping.getPropertyMapping(property.getName());
		
		String ejbPkField = "";
		String ejbSetInterfaceMethod = isPublic?"@ejb:interface-method":"";
		if (property.isKey()) {
			ejbPkField = "@ejb:pk-field";
			ejbSetInterfaceMethod = "";			
		}
		if (propertyMapping.hasConverter() || propertyMapping.hasMultipleConverter()) { // Comun for multiple and normal converter
			String converterClass = propertyMapping.hasConverter()?propertyMapping.getConverterClassName():propertyMapping.getMultipleConverterClassName();		
			String multiple = propertyMapping.hasMultipleConverter()?"Multiple":"";
			# 
	private #(converterClass)# #(property.getName())#Converter;
	private #(converterClass)# get#(propertyName)#Converter() {
		if (#(property.getName())#Converter == null) {
			try {
				#(property.getName())#Converter = (#(converterClass)#) 
					getMetaModel().getMapping().get#(multiple)#Converter("#(property.getName())#");
			}
			catch (Exception ex) {
				ex.printStackTrace();
				throw new #(getExcepcion())#(XavaResources.getString("generator.create_converter_error", "#(property.getName())#"));
			}
			
		}	
		return #(property.getName())#Converter;
	}
			# 			
		}
		if (propertyMapping.hasMultipleConverter()) { // With converter for multiple fields
			Iterator itCmpFields = propertyMapping.getCmpFields().iterator();
			while (itCmpFields.hasNext()) {
				CmpField cmpField = (CmpField) itCmpFields.next();
		# 
	/**	 
	 * @ejb:persistent-field
	 * @jboss:column-name "#(cmpField.getColumn())#"
	 */		
	public abstract #(cmpField.getCmpTypeName())# get#(propertyName)#_#(cmpField.getConverterPropertyName())#();
	public abstract void set#(propertyName)#_#(cmpField.getConverterPropertyName())#(#(cmpField.getCmpTypeName())# newValue);
	
		# 
			}
		# 
	/**
	 * #(tagValueObject)#
	 * #(tagInterfaceMethod)#
	 */
	public #(type)# #(get)##(propertyName)#() {
		try {
		# 
			itCmpFields = propertyMapping.getCmpFields().iterator();
			while (itCmpFields.hasNext()) {
				CmpField cmpField = (CmpField) itCmpFields.next();				
		# 
			get#(propertyName)#Converter().set#(Strings.firstUpper(cmpField.getConverterPropertyName()))#(get#(propertyName)#_#(cmpField.getConverterPropertyName())#());
		# 		
			}
			String toJavaSentence = "get" + propertyName + "Converter().toJava()";
		# 
			return #(Generators.generateCast(type, toJavaSentence))#;
		}
		catch (org.openxava.converters.ConversionException ex) {
			ex.printStackTrace();
			throw new #(getExcepcion())#(XavaResources.getString("generator.conversion_error", "#(propertyName)#", "#(metaModel.getName())#", "#(type)#"));
		}
	}

	/**
	 * #(ejbSetInterfaceMethod)#
	 */
	public void set#(propertyName)#(#(type)# new#(propertyName)#) {
		try {
			# 
			String argv = Generators.generatePrimitiveWrapper(type, "new" + propertyName);
			# 
			get#(propertyName)#Converter().toDB(#(argv)#);
		# 
			itCmpFields = propertyMapping.getCmpFields().iterator();
			while (itCmpFields.hasNext()) {
				CmpField cmpField = (CmpField) itCmpFields.next();				
		# 
			set#(propertyName)#_#(cmpField.getConverterPropertyName())#(get#(propertyName)#Converter().get#(Strings.firstUpper(cmpField.getConverterPropertyName()))#());
		# 		
			}
		# 			
		}
		catch (org.openxava.converters.ConversionException ex) {
			ex.printStackTrace();
			throw new #(getExcepcion())#(XavaResources.getString("generator.conversion_db_error", "#(propertyName)#", "#(metaModel.getName())#"));
		}		
	}	
		# 
		}
		else if (propertyMapping.hasConverter()) { // Wint single field converter
			String cmpType = propertyMapping.getCmpTypeName();
			String getSentence = "get" + propertyName + "Converter().toJava(get_"+propertyName+"())";			
			String setSentence = "get" + propertyName + "Converter().toDB(" + Generators.generatePrimitiveWrapper(type, "new" + propertyName) + ")";
			if (metaModel.isGenerateJDO()) {
# 
	#(attributeAccessLevel)# #(cmpType)# _#(property.getName())#;
	private #(cmpType)# get_#(propertyName)#() {
		return _#(property.getName())#;
	}
	private void set_#(propertyName)#(#(cmpType)# new#(propertyName)#) {
		this._#(property.getName())# = new#(propertyName)#;
	}
# 			
			}
			else {
# 
	/**	 
	 * @ejb:persistent-field
	 * #(ejbPkField)#
	 * @jboss:column-name "#(column)#"
	 */
	public abstract #(cmpType)# get_#(propertyName)#();
	public abstract void set_#(propertyName)#(#(cmpType)# new#(propertyName)#);
# 
			}
# 	
	
	/**
	 * #(tagValueObject)#
	 * #(tagInterfaceMethod)#
	 */
	#(propertyAccessLevel)# #(type)# #(get)##(propertyName)#() {
		try {
			return #(Generators.generateCast(type, getSentence))#;
		}
		catch (org.openxava.converters.ConversionException ex) {
			ex.printStackTrace();
			throw new #(getExcepcion())#(XavaResources.getString("generator.conversion_error", "#(propertyName)#", "#(metaModel.getName())#", "#(type)#"));
		}
	}
	
	/**
	 * #(ejbSetInterfaceMethod)#
	 */
	#(propertyAccessLevel)# void set#(propertyName)#(#(type)# new#(propertyName)#) {
		try {
			set_#(propertyName)#(#(Generators.generateCast(cmpType, setSentence))#);
		}
		catch (org.openxava.converters.ConversionException ex) {
			ex.printStackTrace();
			throw new #(getExcepcion())#(XavaResources.getString("generator.conversion_error", "#(propertyName)#", "#(metaModel.getName())#", "#(type)#"));
		}		
	}	
# 		
		} else { // normal
			if (metaModel.isGenerateJDO()) {
			# 
	#(attributeAccessLevel)# #(type)# #(property.getName())#;
	#(propertyAccessLevel)# #(type)# #(get)##(propertyName)#() {
		return #(property.getName())#;
	}
	#(propertyAccessLevel)# void set#(propertyName)#(#(type)# new#(propertyName)#) {
		this.#(property.getName())# = new#(propertyName)#;
	}
			# 			
			}
			else {
# 
	/**
	 * #(tagInterfaceMethod)#
	 * @ejb:persistent-field
	 * #(ejbPkField)#
	 * #(tagValueObject)#
	 *
	 * @jboss:column-name "#(column)#"
	 */
	public abstract #(type)# #(get)##(propertyName)#();
	/**
	  * #(ejbSetInterfaceMethod)#
	  */
	public abstract void set#(propertyName)#(#(type)# new#(propertyName)#);

# }}} //else/else/else #
