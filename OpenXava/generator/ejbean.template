#declare import="org.openxava.util.Strings"#
#declare import="org.openxava.util.XavaException"#
#declare import="org.openxava.util.meta.MetaSet"#
#declare import="org.openxava.component.MetaComponent"#
#declare import="org.openxava.model.meta.*"#
#declare import="org.openxava.calculators.*"#
#declare import="org.openxava.generators.*"#
#declare import="org.openxava.mapping.*"#

#declarations

private String generateFinderArguments(Collection metaProperties) throws XavaException {
	Iterator it = metaProperties.iterator();
	StringBuffer result = new StringBuffer();
	while (it.hasNext()) {		
		MetaProperty pr = (MetaProperty) it.next();
		result.append("get");
		result.append(Strings.firstUpper(pr.getName()));
		result.append("()");
		if (it.hasNext()) {
			result.append(", ");
		}		
	}
	return result.toString();
}

private String generateFinderArgumentsByKey(IMetaModel model) throws XavaException {
	Iterator it = model.getAllKeyPropertiesNames().iterator();
	StringBuffer result = new StringBuffer();
	while (it.hasNext()) {		
		result.append("get");
		result.append(Strings.change(Strings.firstUpper((String) it.next()), ".", "_"));
		result.append("()");
		if (it.hasNext()) {
			result.append(", ");
		}		
	}
	return result.toString();
}

private String generateFinderArgumentsByKeyDeclaration(IMetaModel model) throws XavaException {
	Iterator it = model.getAllKeyPropertiesNames().iterator();
	StringBuffer result = new StringBuffer();
	while (it.hasNext()) {		
		String propertyName = (String) it.next();
		MetaProperty metaProperty = model.getMetaProperty(propertyName);
		result.append(metaProperty.getCMPTypeName());
		result.append(' ');
		result.append(Strings.change(propertyName, ".", "_"));
		if (it.hasNext()) {
			result.append(", ");
		}		
	}
	return result.toString();
}

private String generateEJBQLforReference(IMetaModel model, String referenceName) throws XavaException {
	StringBuffer result = new StringBuffer("SELECT OBJECT(o) FROM ");
	result.append(model.getName());
	result.append(" o WHERE ");
	ModelMapping mapping = model.getMapping();
	ReferenceMapping referenceMapping = mapping.getReferenceMapping(referenceName);
	int n = 0;
	MetaModel referencedModel = model.getMetaReference(referenceName).getMetaModelReferenced();
	Iterator it = referencedModel.getAllKeyPropertiesNames().iterator();
	while (it.hasNext()) {		
		String propertyName = (String) it.next();		
		result.append("o."); 
		String cmpAttribute = referenceMapping.getCMPAttribute(propertyName);
		result.append(cmpAttribute); 
		result.append(" = ?");		
		result.append(++n);
		if (it.hasNext()) {
			result.append(" AND ");
		}		
	}
	return result.toString();
}


#

# 
String packageName = properties.getProperty("arg3");
String componentName = properties.getProperty("arg4");
String aggregateName = properties.getProperty("arg5");
MetaComponent component = MetaComponent.get(componentName);
String name=null;
IMetaEjb metaModel=null;
ModelMapping modelMapping=null;
boolean reentrant;
if (aggregateName == null) {
	name=componentName;	
	metaModel = (IMetaEjb) component.getMetaEntity();
	modelMapping = component.getEntityMapping();
	reentrant = false;	
}
else {
	name=aggregateName;
	metaModel =  (IMetaEjb)component.getMetaAggregate(aggregateName);
	modelMapping = component.getAggregateMapping(aggregateName);	
	reentrant = true;
}


String jndi = metaModel.getJndi();
String table = modelMapping.getTable();
String keyClass = metaModel.getPrimaryKey();
#
// File generated by OpenXava: #(new Date())#
// Archivo generado por OpenXava: #(new Date())#

// WARNING: NO EDIT
// OJO: NO EDITAR

# if (aggregateName == null) { #
// Component: #(componentName)#		Entity/Entidad
# } else { #
// Component: #(componentName)#		Aggregate/Agregado: #(aggregateName)#
# } #

package #(packageName)#.xejb;

import java.util.*;
import java.math.*;
import javax.ejb.*;
import javax.rmi.PortableRemoteObject;

import org.openxava.ejbx.*;
import org.openxava.util.*;
import org.openxava.component.*;
import org.openxava.model.meta.*;
import org.openxava.validators.ValidationException;

import #(packageName)#.*;


/**
 * @ejb:bean name="#(name)#" type="CMP" jndi-name="@subcontext@/#(jndi)#" reentrant="#(reentrant)#" view-type="remote"
 * @ejb:interface extends="org.openxava.ejbx.EJBReplicable, #(packageName)#.I#(name)#"
 * @ejb:data-object extends="java.lang.Object"
 * @ejb:home extends="javax.ejb.EJBHome"
 * @ejb:pk extends="java.lang.Object"
 *
 * @ejb.value-object name="#(name)#" match="persistentCalculatedAndAggregate"
 *   
 * @ejb:env-entry name="DATA_SOURCE" type="java.lang.String" value="jdbc/DataSource"
 * @ejb:resource-ref  res-name="jdbc/DataSource" res-type="javax.sql.DataSource"  res-auth="Container" jndi-name="jdbc/@datasource@"
 * @jboss:resource-ref  res-ref-name="jdbc/DataSource" resource-name="jdbc/DataSource"
 *
 # 
 // Finders for references
 Iterator itEntityReferences = metaModel.getMetaReferencesWithMapping().iterator(); 
 while (itEntityReferences.hasNext()) {
 	MetaReference reference = (MetaReference) itEntityReferences.next();
 	String referenceName = Strings.firstUpper(reference.getName());
 	MetaModel referencedModel = reference.getMetaModelReferenced();
 	String arguments = generateFinderArgumentsByKeyDeclaration(referencedModel);
 	String condition = generateEJBQLforReference(metaModel, reference.getName());
	String conditionWithOrder = condition + " " + reference.getEJBQLOrderFromReferencedModel();
 # 	
 * @ejb:finder signature="Collection findBy#(referenceName)#(#(arguments)#)" query="#(conditionWithOrder)#" view-type="remote" result-type-mapping="Remote"
 * @jboss:query signature="Collection findBy#(referenceName)#(#(arguments)#)" query="#(conditionWithOrder)#"
 # } 
// Finders for collections with condition
 Iterator itCollectionsWithCondition = metaModel.getMetaCollectionsWithConditionInOthersModels().iterator(); 
 while (itCollectionsWithCondition.hasNext()) {
 	MetaCollection collection = (MetaCollection) itCollectionsWithCondition.next();	
 	String condition = collection.getEJBQLCondition();
	String finderName = collection.getFinderName();
	String arguments = collection.getFinderArguments();
 # 	
 * @ejb:finder signature="Collection find#(finderName)#(#(arguments)#)" query="#(condition)#" view-type="remote" result-type-mapping="Remote"
 * @jboss:query signature="Collection find#(finderName)#(#(arguments)#)" query="#(condition)#" 
 # }  
 // User defined finders
 Iterator itFinders = metaModel.getMetaFinders().iterator();
 while (itFinders.hasNext()) {
 	MetaFinder finder = (MetaFinder) itFinders.next();
 	String finderName = Strings.firstUpper(finder.getName());
 	String arguments = finder.getArguments();
 	String condition = finder.getEJBQLCondition(); 	
 	String type = finder.isCollection()?"Collection":name;
 # 	
 * @ejb:finder signature="#(type)# find#(finderName)#(#(arguments)#)" query="#(condition)#" view-type="remote" result-type-mapping="Remote"
 * @jboss:query signature="#(type)# find#(finderName)#(#(arguments)#)" query="#(condition)#"
 # } # 
 * 
 * @jboss:table-name "#(table)#"
 *
 * @author Javier Paniza
 */
abstract public class #(name)#Bean extends EJBReplicableBase 
			implements #(packageName)#.I#(name)#, EntityBean {	
			
	private boolean creating = false;		
	private boolean modified = false;
	# if (!metaModel.getMetaCalculatorsPostLoad().isEmpty()) { # 
	private static Map lastReads = new HashMap();
	# } #

	// Create	

	# 	
	// For the aggregates
	IMetaEjb containerModel = (IMetaEjb) metaModel.getMetaModelContainer();
	String containerName = containerModel.getName();
	String containerClass = containerModel.getRemote();
	String containerKeyClass = containerModel.getPrimaryKey();
	# 

	/**
	 * @ejb:create-method
	 */
	# if (aggregateName == null) { #	 
	public #(keyClass)# ejbCreate(Map values)
	# } else { 	# 
	public #(keyClass)# ejbCreate(#(containerClass)# container, int counter, Map values)	
	# } # 
		throws
			CreateException,
			ValidationException {
		initMembers();	
		creating = true;	
		modified = false;
		executeSets(values);
	# if (aggregateName != null) { # 
		#(containerKeyClass)# containerKey = null;
		try {
			containerKey = (#(containerKeyClass)#) container.getPrimaryKey();
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("obtain_primary_key_error_on_create", "#(componentName)#", "#(aggregateName)#"));
		}		
		# 
		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
		while (it.hasNext()) {
			String propertyName = (String) it.next(); 
			String propertyNameInKey = propertyName;
			if (propertyName.indexOf('.') >= 0) {				
				propertyName = Strings.change(propertyName, ".", "_");
				propertyNameInKey = "_" + Strings.firstUpper(propertyName);
			}						
		# 
		set#(containerName)#_#(propertyName)#(containerKey.#(propertyNameInKey)#);
		# } # 
			
	# } 
		Collection properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();					
		if (!properties.isEmpty()) {
		# 
		try {
		# 
		}
		Iterator itDefaultValueProperties = properties.iterator(); 
		while (itDefaultValueProperties.hasNext()) {
			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();			
			String propertyName = Strings.firstUpper(property.getName());
			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
			String calculatorClass = calculator.getClassName();
		# 	
			#(calculatorClass)# #(property.getName())#Calculator = (#(calculatorClass)#)
				getMetaModel().getMetaProperty("#(property.getName())#").getMetaCalculatorDefaultValue().createCalculator();
		# 
			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
			while (itSets.hasNext()) {
				MetaSet set = (MetaSet) itSets.next();
				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
		# 	
			#(property.getName())#Calculator.set#(propertyNameInCalculator)#(get#(propertyNameFrom)#());
		# 	} // sets 
		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			#(property.getName())#Calculator.setContainer(container);
			#(property.getName())#Calculator.setCounter(counter);	
		# 	
		} 
		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
		# 
			#(property.getName())#Calculator.setConnectionProvider(getPortableContext());
		# 
		}
		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			#(property.getName())#Calculator.setEntity(this);
		#  		
		}		
		String calculateValueSentence = property.getName() + "Calculator.calculate()";		
		# 
			set#(propertyName)#(#(Generators.generateCast(property.getTypeName(), calculateValueSentence))#);
		# } //properties 				
		if (!properties.isEmpty()) {
		# 
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("entity_create_error", "#(name)#", ex.getLocalizedMessage()));
		}		
		# } // if # 
			
		return null;
	}
	
	# 
	CalculatorsPG postcreatePG = new CalculatorsPG();
	postcreatePG.setMetaModel(metaModel);
	postcreatePG.setCalculators(metaModel.getMetaCalculatorsPostCreate());
	postcreatePG.setType("PostCreate");
	postcreatePG.setError("entity_create_error");			
	# 

	# if (aggregateName == null) { # 
	public void ejbPostCreate(Map values)
	# } else { # 
	public void ejbPostCreate(#(containerClass)# container, int counter, Map values)	
	# } # 
		throws
			CreateException,
			ValidationException {
		# postcreatePG.generate(context, out); # 
	}	
	
	 		
		
# if (aggregateName != null) { # 
	/**
	 * @ejb:create-method
	 */
	public #(keyClass)# ejbCreate(#(containerKeyClass)# containerKey, int counter, Map values)	
		throws
			CreateException,
			ValidationException {
		initMembers();	
		creating = true;
		modified = false;
		executeSets(values);
		# 
		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
		while (it.hasNext()) {
			String propertyName = (String) it.next();
			String propertyNameInKey = propertyName; 
			if (propertyName.indexOf('.') >= 0) {
				propertyName= Strings.change(propertyName, ".", "_");
				propertyNameInKey = "_" + Strings.firstUpper(propertyName);
			}
		# 
		set#(containerName)#_#(propertyName)#(containerKey.#(propertyNameInKey)#);		
		# }  
			
		properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();					
		if (!properties.isEmpty()) {
		# 
		try {
		# 
		}
		itDefaultValueProperties = properties.iterator(); 
		while (itDefaultValueProperties.hasNext()) {
			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();
			String propertyName = Strings.firstUpper(property.getName());
			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
			String calculatorClass = calculator.getClassName();
		# 	
			#(calculatorClass)# #(property.getName())#Calculator = (#(calculatorClass)#)
				getMetaModel().getMetaProperty("#(property.getName())#").getMetaCalculatorDefaultValue().createCalculator();
		# 
			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
			while (itSets.hasNext()) {
				MetaSet set = (MetaSet) itSets.next();
				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
		# 	
			#(property.getName())#Calculator.set#(propertyNameInCalculator)#(get#(propertyNameFrom)#());
		# 	} // sets 
		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			Object container = #(containerName)#Util.getHome().findByPrimaryKey(containerKey);
			#(property.getName())#Calculator.setContainer(container);
			#(property.getName())#Calculator.setCounter(counter);	
		# 	
		} 
		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
		# 
			#(property.getName())#Calculator.setConnectionProvider(getPortableContext());
		# 
		}
		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			#(property.getName())#Calculator.setEntity(this);
		#  		
		}		
		String calculateValueSentence = property.getName() + "Calculator.calculate()";		
		# 
			set#(propertyName)#(#(Generators.generateCast(property.getTypeName(), calculateValueSentence))#);
		# } // properties 				
		if (!properties.isEmpty()) {
		# 
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("entity_create_error", "#(name)#", ex.getLocalizedMessage()));
		}		
		# } // if # 
			
		return null;
	}

	public void ejbPostCreate(#(containerKeyClass)# containerKey, int counter, Map values)	
		throws
			CreateException,
			ValidationException {
		# postcreatePG.generate(context, out); # 
	}

# } # 
	
	/**
	 * @ejb:create-method
	 */
	# if (aggregateName == null) { #	 
	public #(keyClass)# ejbCreate(#(packageName)#.#(name)#Data data)
	# } else { 	# 
	public #(keyClass)# ejbCreate(#(containerClass)# container, int counter, #(packageName)#.#(name)#Data data)	
	# } # 
		throws
			CreateException,
			ValidationException {
		initMembers();	
		creating = true;	
		modified = false;
		setData(data);	
	# if (aggregateName != null) { # 
		#(containerKeyClass)# containerKey = null;
		try {
			containerKey = (#(containerKeyClass)#) container.getPrimaryKey();
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("obtain_primary_key_error_on_create", "#(componentName)#", "#(aggregateName)#"));
		}		
		# 
		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
		while (it.hasNext()) {
			String originalName = (String) it.next();
			if (containerModel.getMapping().isReferencePropertyOverlappingWithSomeProperty(originalName)) continue;
			String propertyName = originalName; 
			String propertyNameInKey = originalName; 
			if (originalName.indexOf('.') >= 0) { 
				propertyName = Strings.change(originalName, ".", "_");
				propertyNameInKey = "_" + Strings.firstUpper(propertyName);				
			}
		# 
		set#(containerName)#_#(propertyName)#(containerKey.#(propertyNameInKey)#);		
		# } # 
			
	# } 
	  else { // It isn't aggregate
		Iterator itKeyProperties = metaModel.getAllKeyPropertiesNames().iterator();
		while (itKeyProperties.hasNext()) {
			String keyProperty = (String) itKeyProperties.next();
			if (modelMapping.isReferencePropertyOverlappingWithSomeProperty(keyProperty)) continue;
			String propertyName = Strings.change(Strings.firstUpper(keyProperty), ".", "_");
			if (modelMapping.hasConverter(keyProperty) || keyProperty.indexOf('.') >= 0) { 
		#  
		set_#(propertyName)#(data.get_#(propertyName)#());		
		# 			
			}
			else {
		# 
		set#(propertyName)#(data.get#(propertyName)#());		
		# 
			} 
		  } 
		} // else if has aggregate
		properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();					
		if (!properties.isEmpty()) {
		# 
		try {
		# 
		}
		itDefaultValueProperties = properties.iterator(); 
		while (itDefaultValueProperties.hasNext()) {
			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();
			String propertyName = Strings.firstUpper(property.getName());
			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
			String calculatorClass = calculator.getClassName();
		# 	
			#(calculatorClass)# #(property.getName())#Calculator= (#(calculatorClass)#)
				getMetaModel().getMetaProperty("#(property.getName())#").getMetaCalculatorDefaultValue().createCalculator();
		# 
			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
			while (itSets.hasNext()) {
				MetaSet set = (MetaSet) itSets.next();
				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
		# 	
			#(property.getName())#Calculator.set#(propertyNameInCalculator)#(get#(propertyNameFrom)#());
		# 	} // poners 
		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			#(property.getName())#Calculator.setContainer(container);
			#(property.getName())#Calculator.setCounter(counter);	
		# 	
		}
		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
		# 
			#(property.getName())#Calculator.setConnectionProvider(getPortableContext());
		# 		
		}
		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			#(property.getName())#Calculator.setEntity(this);
		#  				
		}		
		String calculateValueSentence = property.getName() + "Calculator.calculate()";		
		# 
			set#(propertyName)#(#(Generators.generateCast(property.getTypeName(), calculateValueSentence))#);
		# } //properties 				
		if (!properties.isEmpty()) {
		# 
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("entity_create_error", "#(name)#", ex.getLocalizedMessage()));
		}		
		# } // if # 
			
		return null;
	}

	# if (aggregateName == null) { # 
	public void ejbPostCreate(#(packageName)#.#(name)#Data data)
	# } else { # 
	public void ejbPostCreate(#(containerClass)# container, int counter, #(packageName)#.#(name)#Data data)	
	# } # 
		throws
			CreateException,
			ValidationException {
		# postcreatePG.generate(context, out); # 			
	}
	
	
	/**
	 * @ejb:create-method
	 */
	# if (aggregateName == null) { #	 
	public #(keyClass)# ejbCreate(#(packageName)#.#(name)#Value value)
	# } else { 	# 
	public #(keyClass)# ejbCreate(#(containerClass)# container, int counter, #(packageName)#.#(name)#Value value)	
	# } # 
		throws
			CreateException,
			ValidationException {
		initMembers();	
		creating = true;	
		modified = false;
		set#(name)#Value(value);	
		# 
		Iterator itKeyProperties = metaModel.getAllKeyPropertiesNames().iterator();
		while (itKeyProperties.hasNext()) {
			String propertyName = (String) itKeyProperties.next();
			propertyName = Strings.firstUpper(Strings.change(propertyName, ".", "_"));
		# 
		set#(propertyName)#(value.get#(propertyName)#());
		# } # 		
	# if (aggregateName != null) { # 
		#(containerKeyClass)# containerKey = null;
		try {
			containerKey = (#(containerKeyClass)#) container.getPrimaryKey();
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("obtain_primary_key_error_on_create", "#(componentName)#", "#(aggregateName)#"));
		}		
		# 
		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
		while (it.hasNext()) {
			String propertyName = (String) it.next();
			String propertyNameInKey = propertyName;
			if (propertyName.indexOf('.') >= 0) {
				propertyName = Strings.change(propertyName, ".", "_");
				propertyNameInKey = "_" + Strings.firstUpper(propertyName);
			}
		# 
		set#(containerName)#_#(propertyName)#(containerKey.#(propertyNameInKey)#);		
		# } # 
			
	# } // if has aggregate
		properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();					
		if (!properties.isEmpty()) {
		# 
		try {
		# 
		}
		itDefaultValueProperties = properties.iterator(); 
		while (itDefaultValueProperties.hasNext()) {
			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();
			String propertyName = Strings.firstUpper(property.getName());
			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
			String calculatorClass = calculator.getClassName();
		# 	
			#(calculatorClass)# #(property.getName())#Calculator = (#(calculatorClass)#)
				getMetaModel().getMetaProperty("#(property.getName())#").getMetaCalculatorDefaultValue().createCalculator();
		# 
			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
			while (itSets.hasNext()) {
				MetaSet set = (MetaSet) itSets.next();
				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
		# 	
			#(property.getName())#Calculator.set#(propertyNameInCalculator)#(get#(propertyNameFrom)#());
		# 	} // sets 
		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			#(property.getName())#Calculator.setContainer(container);
			#(property.getName())#Calculator.setCounter(counter);	
		# 	
		}
		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
		# 
			#(property.getName())#Calculator.setConnectionProvider(getPortableContext());
		# 		
		}
		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			#(property.getName())#Calculator.setEntity(this);
		#  				
		}
		String calculateValueSentence = property.getName() + "Calculator.calculate()";		
		# 
			set#(propertyName)#(#(Generators.generateCast(property.getTypeName(), calculateValueSentence))#);
		# } //property
		if (!properties.isEmpty()) {
		# 
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("entity_create_error", "#(name)#", ex.getLocalizedMessage()));
		}		
		# } // if # 
			
		return null;
	}

	# if (aggregateName == null) { # 
	public void ejbPostCreate(#(packageName)#.#(name)#Value value)
	# } else { # 
	public void ejbPostCreate(#(containerClass)# container, int counter, #(packageName)#.#(name)#Value value)	
	# } # 
		throws
			CreateException,
			ValidationException {
		# postcreatePG.generate(context, out); # 			
	}
	
	# if (aggregateName != null) { #	 
	/**
	 * @ejb:create-method
	 */
	public #(keyClass)# ejbCreate(#(containerKeyClass)# containerKey, int counter, #(packageName)#.#(name)#Value value)
		throws
			CreateException,
			ValidationException {
		initMembers();	
		creating = true;
		modified = false;
		set#(name)#Value(value);
		# 
		itKeyProperties = metaModel.getAllKeyPropertiesNames().iterator();
		while (itKeyProperties.hasNext()) {
			String propertyName = Strings.change(Strings.firstUpper((String) itKeyProperties.next()), ".", "_");						
		# 
		set#(propertyName)#(value.get#(propertyName)#()); 
		# 
		} 		
		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
		while (it.hasNext()) {
			String propertyName = (String) it.next();
			String propertyNameInKey = propertyName;
			if (propertyName.indexOf('.') >= 0) {
				propertyName = Strings.change(propertyName, ".", "_");
				propertyNameInKey = "_" + Strings.firstUpper(propertyName);
			}
		#
		set#(containerName)#_#(propertyName)#(containerKey.#(propertyNameInKey)#);
		# } 
		properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();
		if (!properties.isEmpty()) {
		# 
		try {
		# 
		}
		itDefaultValueProperties = properties.iterator();
		while (itDefaultValueProperties.hasNext()) {
			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();
			String propertyName = Strings.firstUpper(property.getName());
			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
			String calculatorClass = calculator.getClassName();
		# 
			#(calculatorClass)# #(property.getName())#Calculator= (#(calculatorClass)#)
				getMetaModel().getMetaProperty("#(property.getName())#").getMetaCalculatorDefaultValue().createCalculator();
		# 
			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
			while (itSets.hasNext()) {
				MetaSet set = (MetaSet) itSets.next();
				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
		# 
			#(property.getName())#Calculator.set#(propertyNameInCalculator)#(get#(propertyNameFrom)#());
		# 	} // sets
		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
		# 
			Object container = #(containerName)#Util.getHome().findByPrimaryKey(containerKey);
			#(property.getName())#Calculator.setContainer(container);
			#(property.getName())#Calculator.setCounter(counter);
		# 
		}
		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
		# 
			#(property.getName())#Calculator.setConnectionProvider(getPortableContext());
		# 
		}
		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
		# 
			#(property.getName())#Calculator.setEntity(this);
		#  				
		}
		
		String calculateValueSentence = property.getName() + "Calculator.calculate()";
		# 
			set#(propertyName)#(#(Generators.generateCast(property.getTypeName(), calculateValueSentence))#);
		# } // properties
		
		if (!properties.isEmpty()) {
		#
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("entity_create_error", "#(name)#", ex.getLocalizedMessage()));
		}
		# } // if # 
		return null;					

	}	
	# } # 

	# if (aggregateName != null) { # 
	public void ejbPostCreate(#(containerKeyClass)# containerKey, int counter, #(packageName)#.#(name)#Value value)	
		throws
			CreateException,
			ValidationException {
		# postcreatePG.generate(context, out); # 			
	}	
	# } #
	
	public void ejbLoad() {
		creating = false;
		modified = false;
		
		# if (!metaModel.getMetaCalculatorsPostLoad().isEmpty()) { # 
		// ejbLoad is executed often, hence executing calculated each 5 seconds is enougth  
		long time = System.currentTimeMillis();
		Object key = getEntityContext().getPrimaryKey();
		Long olastRead = (Long) lastReads.get(key);
		long lastRead = olastRead == null?0:olastRead.longValue();
		if (time - lastRead < 5000) {					
			return;
		}
		lastReads.put(key, new Long(time)); 
		# } # 		
		# 
		CalculatorsPG postloadPG = new CalculatorsPG();
		postloadPG.setMetaModel(metaModel);
		postloadPG.setCalculators(metaModel.getMetaCalculatorsPostLoad());
		postloadPG.setType("PostLoad");
		postloadPG.setError("entity_load_error");
		postloadPG.generate(context, out);		
		# 
	}
	
	public void ejbStore() {
		if (creating) {
			creating = false;
			return;
		}
		if (!modified) return;
		
		# 
		CalculatorsPG postmodifyPG = new CalculatorsPG();
		postmodifyPG.setMetaModel(metaModel);
		postmodifyPG.setCalculators(metaModel.getMetaCalculatorsPostModify());
		postmodifyPG.setType("PostModify");
		postmodifyPG.setError("entity_modify_error");
		postmodifyPG.generate(context, out);		
		# 
		
		modified = false;
	} 	
	

	public void ejbRemove() throws RemoveException {
		# 
		CalculatorsPG preremovePG = new CalculatorsPG();
		preremovePG.setMetaModel(metaModel);
		preremovePG.setCalculators(metaModel.getMetaCalculatorsPreRemove());
		preremovePG.setType("PreRemove");
		preremovePG.setError("entity_remove_error");
		preremovePG.generate(context, out);		
		# 						
	} 	
	
	// Properties/Propiedades
	
# 
Iterator itProperties = metaModel.getMetaProperties().iterator();	
while (itProperties.hasNext()) {	
	MetaProperty property = (MetaProperty) itProperties.next();
	PropertyPG.generateEJB(context, out, property); 
}
# 

	// Colecciones/Collections
	
# 
Iterator itCollections = metaModel.getMetaCollections().iterator();	
while (itCollections.hasNext()) {	
	MetaCollection collection = (MetaCollection) itCollections.next();
	String collectionName = Strings.firstUpper(collection.getName());
	MetaReference reference = collection.getMetaReference();	
	IMetaEjb referencedModel = (IMetaEjb) reference.getMetaModelReferenced();
	String homeClass = referencedModel.getHome();
	String referencedModelName = reference.getReferencedModelName();
	String referencedModelClass = referencedModel.getRemote();
	String referencedModelInterface = referencedModel.getInterfaceName();
	String referencedJNDI = referencedModel.getJndi();
	String homeAttribute = Strings.firstLower(collectionName) + "Home";
	String getHome = "get" + Strings.firstUpper(homeAttribute);
	String role = Strings.firstUpper(reference.getRole());
	String finderName = collection.hasCondition()?collection.getFinderName():"By" + role;
	String finderArguments = collection.hasCondition()?generateFinderArguments(collection.getMetaPropertiesFinderArguments(false)):generateFinderArgumentsByKey(metaModel);		
#	

	private #(homeClass)# #(homeAttribute)#;

# if (!reference.isAggregate() && 
	!collection.hasCondition() && 
	!collection.hasCalculator() && 
	!reference.getMetaModelReferenced().getMetaReference(reference.getRole()).isKey()) { #
	/**
	 * @ejb:interface-method
	 */
	public void addTo#(collectionName)#(#(referencedModelInterface)# newElement) {
		if (newElement != null) { 
			try {
				((#(referencedModelClass)#) newElement).set#(role)#Key((#(keyClass)#) getEntityContext().getPrimaryKey());
			}
			catch (Exception ex) {
				ex.printStackTrace();
				throw new EJBException(XavaResources.getString("add_collection_element_error", "#(referencedModelName)#", "#(name)#"));
			}
		}
	}
	
	/**
	 * @ejb:interface-method
	 */
	public void removeFrom#(collectionName)#(#(referencedModelInterface)# toRemove) {
		if (toRemove != null) {
			try {
				((#(referencedModelClass)#) toRemove).set#(role)#Key(null);
			}
			catch (Exception ex) {
				ex.printStackTrace();
				throw new EJBException(XavaResources.getString("remove_collection_element_error", "#(referencedModelName)#", "#(name)#"));
			}
		}
	}
	
# } // if aggregate #	

# if (collection.hasCalculator()) { 
	
	CalculatedCollectionPG.generateEJB(context, out, collection);
	
  } else {  
# 
	/**
	 * @ejb:interface-method
	 */
	public java.util.Collection get#(collectionName)#() {		
		try {
			return #(getHome)#().find#(finderName)#(#(finderArguments)#);
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(XavaResources.getString("get_collection_elements_error", "#(collectionName)#", "#(name)#"));
		}
	}
		
	private #(homeClass)# #(getHome)#() throws Exception{
		if (#(homeAttribute)# == null) {
			#(homeAttribute)# = (#(homeClass)#) PortableRemoteObject.narrow(
			 		BeansContext.get().lookup("#(referencedJNDI)#"),
			 		#(homeClass)#.class);			 		
		}
		return #(homeAttribute)#;
	}

# } // collection.hasCalculator #
	
# } // collections #		

	// References/Referencias
	
  
# 
Iterator itReferences = metaModel.getMetaReferences().iterator();	
while (itReferences.hasNext()) {	
	MetaReference reference = (MetaReference) itReferences.next();
	String referenceName = Strings.firstUpper(reference.getName());	
	if (reference.getMetaModelReferenced() instanceof MetaAggregateBean) {	
		AggregateReferencePG.generateEJB(context, out, reference);
	} 
	else { // reference to entity or aggreate implemented as EJB
		EntityReferenceEJBPG.generate(context, out, reference);
	}
} 
# 
 
# 	
	MethodsPG.generateEJB(context, out, metaModel); 
# 

	private MetaModel metaModel;
	public MetaModel getMetaModel() throws XavaException {
		if (metaModel == null) {
		# if (aggregateName == null) { #
			metaModel = MetaComponent.get("#(componentName)#").getMetaEntity();
		# } else { # 
			metaModel = MetaComponent.get("#(componentName)#").getMetaAggregate("#(aggregateName)#");
		# } # 	
		}
		return metaModel;
	}
	
	
	/**
	 * @ejb:interface-method
	 */	
	public abstract #(packageName)#.#(name)#Data getData();		
	
	/**
	 * @ejb:interface-method
	 */		
	public abstract void setData(#(packageName)#.#(name)#Data data);
	
	/**
	 * @ejb:interface-method
	 */	
	public abstract #(packageName)#.#(name)#Value get#(name)#Value();		
	
	/**
	 * @ejb:interface-method
	 */		
	public abstract void set#(name)#Value(#(packageName)#.#(name)#Value value);
	
	public void setEntityContext(javax.ejb.EntityContext ctx) {
		super.setEntityContext(ctx);
	}
	public void unsetEntityContext() {
		super.unsetEntityContext();
	}
	
	private void initMembers() {
		# 
		Iterator itPropertiesToInit = metaModel.getMetaPropertiesPersistents().iterator();
		while (itPropertiesToInit.hasNext()) {
			MetaProperty p = (MetaProperty) itPropertiesToInit.next();
			String propertyName = Strings.firstUpper(p.getName());
			if (!p.getType().isPrimitive()) {				
		# 
		set#(propertyName)#(null);
		# 
			}
			else if (p.isNumber()) {
		# 
		set#(propertyName)#(0);
		# 	
			}
			else if (p.getType().getName().equals("boolean")) {
		# 
		set#(propertyName)#(false);
		# 
			}
		}
		# 
		
		# 
		for (Iterator it = metaModel.getMetaReferencesWithMapping().iterator(); it.hasNext(); ) {
			MetaReference ref = (MetaReference) it.next();
			String refName = Strings.firstUpper(ref.getName());
		# 
		set#(refName)#Key(null);
		# 
		}
		# 	
	}
		
}
