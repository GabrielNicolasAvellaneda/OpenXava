<?xml version="1.0" encoding="ISO-8859-1"?>
#declare import="org.openxava.component.MetaComponent"#
#declare import="org.openxava.model.meta.*"#
#declare import="org.openxava.mapping.*"#
#declare import="org.openxava.util.Strings"#

<!-- Generated by OpenXava: #(new Date())# -->
# 
String packageName = properties.getProperty("arg3");
String componentName = properties.getProperty("arg4");
String aggregateName = properties.getProperty("arg5");
MetaComponent component = MetaComponent.get(componentName);

String name=null;
IMetaModel metaModel=null;
if (aggregateName == null) {
	name=componentName;	
	metaModel = (IMetaModel) component.getMetaEntity();
}
else {
	name=aggregateName;	
	metaModel =  (IMetaEjb)component.getMetaAggregate(aggregateName);
}
ModelMapping mapping = metaModel.getMapping();
#

<!DOCTYPE hibernate-mapping SYSTEM "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">

<hibernate-mapping package="#(packageName)#">

  <class 
  	name="#(name)#"
  	table="#(mapping.getTable())#">
  	
# 
Collection keyProperties = metaModel.getMetaPropertiesKey(); 
if (keyProperties.size() == 1) {
	MetaProperty key = (MetaProperty) keyProperties.iterator().next();
	PropertyMapping pMapping = key.getMapping();
	String propertyName = pMapping.hasConverter()?"_"+Strings.firstUpper(key.getName()):key.getName();	
# 	
		<id name="#(propertyName)#" column="#(pMapping.getColumn())#">
			<generator class="assigned"/>
		</id>
# 
}
else {
# 
		<composite-id>
# 
	for (Iterator it = keyProperties.iterator(); it.hasNext();) {
		MetaProperty key = (MetaProperty) it.next();
		PropertyMapping pMapping = key.getMapping();
		String propertyName = pMapping.hasConverter()?"_"+Strings.firstUpper(key.getName()):key.getName();			
# 	
			<key-property name="#(propertyName)#" column="#(pMapping.getColumn())#"/>
# 	
	}
#  	
		</composite-id>
# 		
}

	Collection properties = metaModel.getMetaPropertiesPersistents();
	for (Iterator it = properties.iterator(); it.hasNext();) {
		MetaProperty prop = (MetaProperty) it.next();
		PropertyMapping pMapping = prop.getMapping();
		String propertyName = pMapping.hasConverter()?"_"+Strings.firstUpper(prop.getName()):prop.getName();			
		if (!prop.isKey()) {
# 	
		<property name="#(propertyName)#" column="#(pMapping.getColumn())#"/>
# 	
		} 
	}
#   
		
  </class>

</hibernate-mapping>

