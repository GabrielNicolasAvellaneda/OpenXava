
/* Generated by TL2Java Version 1.2, April 9, 2001 */
import org.w3c.dom.*;
import java.io.*;
import java.util.*;
import org.openxava.util.Strings;
import org.openxava.util.XavaException;
import org.openxava.util.meta.MetaSet;
import org.openxava.component.MetaComponent;
import org.openxava.model.meta.*;
import org.openxava.calculators.*;
import org.openxava.generators.*;
import org.openxava.mapping.*;

/**
 * Program Generator created by TL2Java
 * @version Thu Nov 17 18:41:53 CET 2005
 */
public class EJBeanPG {
    Properties properties = new Properties();


private String generateFinderArguments(Collection metaProperties) throws XavaException {
	Iterator it = metaProperties.iterator();
	StringBuffer result = new StringBuffer();
	while (it.hasNext()) {		
		MetaProperty pr = (MetaProperty) it.next();
		result.append("get");
		result.append(Strings.firstUpper(pr.getName()));
		result.append("()");
		if (it.hasNext()) {
			result.append(", ");
		}		
	}
	return result.toString();
}

private String generateFinderArgumentsByKey(IMetaModel model) throws XavaException {
	Iterator it = model.getAllKeyPropertiesNames().iterator();
	StringBuffer result = new StringBuffer();
	while (it.hasNext()) {		
		result.append("get");
		result.append(Strings.change(Strings.firstUpper((String) it.next()), ".", "_"));
		result.append("()");
		if (it.hasNext()) {
			result.append(", ");
		}		
	}
	return result.toString();
}

private String generateFinderArgumentsByKeyDeclaration(IMetaModel model) throws XavaException {
	Iterator it = model.getAllKeyPropertiesNames().iterator();
	StringBuffer result = new StringBuffer();
	while (it.hasNext()) {		
		String propertyName = (String) it.next();
		MetaProperty metaProperty = model.getMetaProperty(propertyName);
		result.append(metaProperty.getCMPTypeName());
		result.append(' ');
		result.append(Strings.change(propertyName, ".", "_"));
		if (it.hasNext()) {
			result.append(", ");
		}		
	}
	return result.toString();
}

private String generateEJBQLforReference(IMetaModel model, String referenceName) throws XavaException {
	StringBuffer result = new StringBuffer("SELECT OBJECT(o) FROM ");
	result.append(model.getName());
	result.append(" o WHERE ");
	ModelMapping mapping = model.getMapping();
	ReferenceMapping referenceMapping = mapping.getReferenceMapping(referenceName);
	int n = 0;
	MetaModel referencedModel = model.getMetaReference(referenceName).getMetaModelReferenced();
	Iterator it = referencedModel.getAllKeyPropertiesNames().iterator();
	while (it.hasNext()) {		
		String propertyName = (String) it.next();		
		result.append("o."); 
		String cmpAttribute = referenceMapping.getCMPAttribute(propertyName);
		result.append(cmpAttribute); 
		result.append(" = ?");		
		result.append(++n);
		if (it.hasNext()) {
			result.append(" AND ");
		}		
	}
	return result.toString();
}




    /**
     * This method generates the output given a context and output stream
     */
    public boolean generate(XPathContext context, ProgramWriter out) {
        try {    
    String packageName = properties.getProperty("arg3");
    String componentName = properties.getProperty("arg4");
    String aggregateName = properties.getProperty("arg5");
    MetaComponent component = MetaComponent.get(componentName);
    String name=null;
    IMetaEjb metaModel=null;
    ModelMapping modelMapping=null;
    boolean reentrant;
    if (aggregateName == null) {
    	name=componentName;	
    	metaModel = (IMetaEjb) component.getMetaEntity();
    	modelMapping = component.getEntityMapping();
    	reentrant = false;	
    }
    else {
    	name=aggregateName;
    	metaModel =  (IMetaEjb)component.getMetaAggregate(aggregateName);
    	modelMapping = component.getAggregateMapping(aggregateName);	
    	reentrant = true;
    }
    
    
    String jndi = metaModel.getJndi();
    String table = modelMapping.getTable();
    String keyClass = metaModel.getPrimaryKey();
    
    out.print("\n// File generated by OpenXava: ");
    out.print(new Date());
    out.print("\n// Archivo generado por OpenXava: ");
    out.print(new Date());
    out.print("\n\n// WARNING: NO EDIT\n// OJO: NO EDITAR");
    if (aggregateName == null) { 
    out.print("\n// Component: ");
    out.print(componentName);
    out.print("\t\tEntity/Entidad");
    } else { 
    out.print("\n// Component: ");
    out.print(componentName);
    out.print("\t\tAggregate/Agregado: ");
    out.print(aggregateName);
    } 
    out.print("\n\npackage ");
    out.print(packageName);
    out.print(".xejb;\n\nimport java.util.*;\nimport java.math.*;\nimport javax.ejb.*;\nimport javax.rmi.PortableRemoteObject;\n\nimport org.openxava.ejbx.*;\nimport org.openxava.util.*;\nimport org.openxava.component.*;\nimport org.openxava.model.meta.*;\nimport org.openxava.validators.ValidationException;\n\nimport ");
    out.print(packageName);
    out.print(".*;\n\n\n/**\n * @ejb:bean name=\"");
    out.print(name);
    out.print("\" type=\"CMP\" jndi-name=\"@subcontext@/");
    out.print(jndi);
    out.print("\" reentrant=\"");
    out.print(reentrant);
    out.print("\" view-type=\"remote\"\n * @ejb:interface extends=\"org.openxava.ejbx.EJBReplicable, ");
    out.print(packageName);
    out.print(".I");
    out.print(name);
    out.print("\"\n * @ejb:data-object extends=\"java.lang.Object\"\n * @ejb:home extends=\"javax.ejb.EJBHome\"\n * @ejb:pk extends=\"java.lang.Object\"\n *\n * @ejb.value-object name=\"");
    out.print(name);
    out.print("\" match=\"persistentCalculatedAndAggregate\"\n *   \n * @ejb:env-entry name=\"DATA_SOURCE\" type=\"java.lang.String\" value=\"jdbc/DataSource\"\n * @ejb:resource-ref  res-name=\"jdbc/DataSource\" res-type=\"javax.sql.DataSource\"  res-auth=\"Container\" jndi-name=\"jdbc/@datasource@\"\n * @jboss:resource-ref  res-ref-name=\"jdbc/DataSource\" resource-name=\"jdbc/DataSource\"\n *");
    
     // Finders for references
     Iterator itEntityReferences = metaModel.getMetaReferencesWithMapping().iterator(); 
     while (itEntityReferences.hasNext()) {
     	MetaReference reference = (MetaReference) itEntityReferences.next();
     	String referenceName = Strings.firstUpper(reference.getName());
     	MetaModel referencedModel = reference.getMetaModelReferenced();
     	String arguments = generateFinderArgumentsByKeyDeclaration(referencedModel);
     	String condition = generateEJBQLforReference(metaModel, reference.getName());
    	String conditionWithOrder = condition + " " + reference.getEJBQLOrderFromReferencedModel();
     
    out.print(" \t\n * @ejb:finder signature=\"Collection findBy");
    out.print(referenceName);
    out.print("(");
    out.print(arguments);
    out.print(")\" query=\"");
    out.print(conditionWithOrder);
    out.print("\" view-type=\"remote\" result-type-mapping=\"Remote\"\n * @jboss:query signature=\"Collection findBy");
    out.print(referenceName);
    out.print("(");
    out.print(arguments);
    out.print(")\" query=\"");
    out.print(conditionWithOrder);
    out.print("\"");
    } 
    // Finders for collections with condition
     Iterator itCollectionsWithCondition = metaModel.getMetaCollectionsWithConditionInOthersModels().iterator(); 
     while (itCollectionsWithCondition.hasNext()) {
     	MetaCollection collection = (MetaCollection) itCollectionsWithCondition.next();	
     	String condition = collection.getEJBQLCondition();
    	String finderName = collection.getFinderName();
    	String arguments = collection.getFinderArguments();
     
    out.print(" \t\n * @ejb:finder signature=\"Collection find");
    out.print(finderName);
    out.print("(");
    out.print(arguments);
    out.print(")\" query=\"");
    out.print(condition);
    out.print("\" view-type=\"remote\" result-type-mapping=\"Remote\"\n * @jboss:query signature=\"Collection find");
    out.print(finderName);
    out.print("(");
    out.print(arguments);
    out.print(")\" query=\"");
    out.print(condition);
    out.print("\"");
    }  
     // User defined finders
     Iterator itFinders = metaModel.getMetaFinders().iterator();
     while (itFinders.hasNext()) {
     	MetaFinder finder = (MetaFinder) itFinders.next();
     	String finderName = Strings.firstUpper(finder.getName());
     	String arguments = finder.getArguments();
     	String condition = finder.getEJBQLCondition(); 	
     	String type = finder.isCollection()?"Collection":name;
     
    out.print(" \t\n * @ejb:finder signature=\"");
    out.print(type);
    out.print(" find");
    out.print(finderName);
    out.print("(");
    out.print(arguments);
    out.print(")\" query=\"");
    out.print(condition);
    out.print("\" view-type=\"remote\" result-type-mapping=\"Remote\"\n * @jboss:query signature=\"");
    out.print(type);
    out.print(" find");
    out.print(finderName);
    out.print("(");
    out.print(arguments);
    out.print(")\" query=\"");
    out.print(condition);
    out.print("\"");
    } 
    out.print(" \n * \n * @jboss:table-name \"");
    out.print(table);
    out.print("\"\n *\n * @author Javier Paniza\n */\nabstract public class ");
    out.print(name);
    out.print("Bean extends EJBReplicableBase \n\t\t\timplements ");
    out.print(packageName);
    out.print(".I");
    out.print(name);
    out.print(", EntityBean {\t\n\t\t\t\n\tprivate boolean creating = false;\t\t\n\tprivate boolean modified = false;\n\n\t// Create");
    	
    	// For the aggregates
    	IMetaEjb containerModel = (IMetaEjb) metaModel.getMetaModelContainer();
    	String containerName = containerModel.getName();
    	String containerClass = containerModel.getRemote();
    	String containerKeyClass = containerModel.getPrimaryKey();
    	
    out.print(" \n\n\t/**\n\t * @ejb:create-method\n\t */");
    if (aggregateName == null) { 
    out.print("\t \n\tpublic ");
    out.print(keyClass);
    out.print(" ejbCreate(Map values)");
    } else { 	
    out.print(" \n\tpublic ");
    out.print(keyClass);
    out.print(" ejbCreate(");
    out.print(containerClass);
    out.print(" container, int counter, Map values)");
    } 
    out.print(" \n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {\n\t\tinitMembers();\t\n\t\tcreating = true;\t\n\t\tmodified = false;\n\t\texecuteSets(values);");
    if (aggregateName != null) { 
    out.print(" \n\t\t");
    out.print(containerKeyClass);
    out.print(" containerKey = null;\n\t\ttry {\n\t\t\tcontainerKey = (");
    out.print(containerKeyClass);
    out.print(") container.getPrimaryKey();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"obtain_primary_key_error_on_create\", \"");
    out.print(componentName);
    out.print("\", \"");
    out.print(aggregateName);
    out.print("\"));\n\t\t}");
    
    		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
    		while (it.hasNext()) {
    			String propertyName = (String) it.next(); 
    			String propertyNameInKey = propertyName;
    			if (propertyName.indexOf('.') >= 0) {				
    				propertyName = Strings.change(propertyName, ".", "_");
    				propertyNameInKey = "_" + Strings.firstUpper(propertyName);
    			}						
    		
    out.print(" \n\t\tset");
    out.print(containerName);
    out.print("_");
    out.print(propertyName);
    out.print("(containerKey.");
    out.print(propertyNameInKey);
    out.print(");");
    } 
    } 
    		Collection properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();					
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\ttry {");
    
    		}
    		Iterator itDefaultValueProperties = properties.iterator(); 
    		while (itDefaultValueProperties.hasNext()) {
    			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();			
    			String propertyName = Strings.firstUpper(property.getName());
    			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
    			String calculatorClass = calculator.getClassName();
    		
    out.print(" \t\n\t\t\t");
    out.print(calculatorClass);
    out.print(" ");
    out.print(property.getName());
    out.print("Calculator = (");
    out.print(calculatorClass);
    out.print(")\n\t\t\t\tgetMetaModel().getMetaProperty(\"");
    out.print(property.getName());
    out.print("\").getMetaCalculatorDefaultValue().getCalculator();");
    
    			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
    			while (itSets.hasNext()) {
    				MetaSet set = (MetaSet) itSets.next();
    				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
    				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
    		
    out.print(" \t\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.set");
    out.print(propertyNameInCalculator);
    out.print("(get");
    out.print(propertyNameFrom);
    out.print("());");
    	} // sets 
    		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setContainerKey(containerKey);\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setCounter(counter);");
    	
    		} 
    		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setConnectionProvider(getPortableContext());");
    
    		}
    		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setEntity(this);");
     		
    		}		
    		String calculateValueSentence = property.getName() + "Calculator.calculate()";		
    		
    out.print(" \n\t\t\tset");
    out.print(propertyName);
    out.print("(");
    out.print(Generators.generateCast(property.getTypeName(), calculateValueSentence));
    out.print(");");
    } //properties 				
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"entity_create_error\", \"");
    out.print(name);
    out.print("\", ex.getLocalizedMessage()));\n\t\t}");
    } // if 
    out.print(" \n\t\t\t\n\t\treturn null;\n\t}");
    if (aggregateName == null) { 
    out.print(" \n\tpublic void ejbPostCreate(Map values)");
    } else { 
    out.print(" \n\tpublic void ejbPostCreate(");
    out.print(containerClass);
    out.print(" container, int counter, Map values)");
    } 
    out.print(" \n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {");
    PostcreatePG.generate(context, out, metaModel); 
    out.print(" \n\t}");
    if (aggregateName != null) { 
    out.print(" \n\t/**\n\t * @ejb:create-method\n\t */\n\tpublic ");
    out.print(keyClass);
    out.print(" ejbCreate(");
    out.print(containerKeyClass);
    out.print(" containerKey, int counter, Map values)\t\n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {\n\t\tinitMembers();\t\n\t\tcreating = true;\n\t\tmodified = false;\n\t\texecuteSets(values);");
    
    		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
    		while (it.hasNext()) {
    			String propertyName = (String) it.next();
    			String propertyNameInKey = propertyName; 
    			if (propertyName.indexOf('.') >= 0) {
    				propertyName= Strings.change(propertyName, ".", "_");
    				propertyNameInKey = "_" + Strings.firstUpper(propertyName);
    			}
    		
    out.print(" \n\t\tset");
    out.print(containerName);
    out.print("_");
    out.print(propertyName);
    out.print("(containerKey.");
    out.print(propertyNameInKey);
    out.print(");");
    }  
    			
    		properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();					
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\ttry {");
    
    		}
    		itDefaultValueProperties = properties.iterator(); 
    		while (itDefaultValueProperties.hasNext()) {
    			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();
    			String propertyName = Strings.firstUpper(property.getName());
    			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
    			String calculatorClass = calculator.getClassName();
    		
    out.print(" \t\n\t\t\t");
    out.print(calculatorClass);
    out.print(" ");
    out.print(property.getName());
    out.print("Calculator = (");
    out.print(calculatorClass);
    out.print(")\n\t\t\t\tgetMetaModel().getMetaProperty(\"");
    out.print(property.getName());
    out.print("\").getMetaCalculatorDefaultValue().getCalculator();");
    
    			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
    			while (itSets.hasNext()) {
    				MetaSet set = (MetaSet) itSets.next();
    				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
    				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
    		
    out.print(" \t\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.set");
    out.print(propertyNameInCalculator);
    out.print("(get");
    out.print(propertyNameFrom);
    out.print("());");
    	} // sets 
    		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setContainerKey(containerKey);\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setCounter(counter);");
    	
    		} 
    		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setConnectionProvider(getPortableContext());");
    
    		}
    		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setEntity(this);");
     		
    		}		
    		String calculateValueSentence = property.getName() + "Calculator.calculate()";		
    		
    out.print(" \n\t\t\tset");
    out.print(propertyName);
    out.print("(");
    out.print(Generators.generateCast(property.getTypeName(), calculateValueSentence));
    out.print(");");
    } // properties 				
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"entity_create_error\", \"");
    out.print(name);
    out.print("\", ex.getLocalizedMessage()));\n\t\t}");
    } // if 
    out.print(" \n\t\t\t\n\t\treturn null;\n\t}\n\n\tpublic void ejbPostCreate(");
    out.print(containerKeyClass);
    out.print(" containerKey, int counter, Map values)\t\n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {");
    PostcreatePG.generate(context, out, metaModel); 
    out.print("\t\t\t\n\t}");
    } 
    out.print(" \n\t\n\t/**\n\t * @ejb:create-method\n\t */");
    if (aggregateName == null) { 
    out.print("\t \n\tpublic ");
    out.print(keyClass);
    out.print(" ejbCreate(");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Data data)");
    } else { 	
    out.print(" \n\tpublic ");
    out.print(keyClass);
    out.print(" ejbCreate(");
    out.print(containerClass);
    out.print(" container, int counter, ");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Data data)");
    } 
    out.print(" \n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {\n\t\tinitMembers();\t\n\t\tcreating = true;\t\n\t\tmodified = false;\n\t\tsetData(data);");
    if (aggregateName != null) { 
    out.print(" \n\t\t");
    out.print(containerKeyClass);
    out.print(" containerKey = null;\n\t\ttry {\n\t\t\tcontainerKey = (");
    out.print(containerKeyClass);
    out.print(") container.getPrimaryKey();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"obtain_primary_key_error_on_create\", \"");
    out.print(componentName);
    out.print("\", \"");
    out.print(aggregateName);
    out.print("\"));\n\t\t}");
    
    		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
    		while (it.hasNext()) {
    			String originalName = (String) it.next();
    			if (containerModel.getMapping().isReferencePropertyOverlappingWithSomeProperty(originalName)) continue;
    			String propertyName = originalName; 
    			String propertyNameInKey = originalName; 
    			if (originalName.indexOf('.') >= 0) { 
    				propertyName = Strings.change(originalName, ".", "_");
    				propertyNameInKey = "_" + Strings.firstUpper(propertyName);				
    			}
    		
    out.print(" \n\t\tset");
    out.print(containerName);
    out.print("_");
    out.print(propertyName);
    out.print("(containerKey.");
    out.print(propertyNameInKey);
    out.print(");");
    } 
    } 
    	  else { // It isn't aggregate
    		Iterator itKeyProperties = metaModel.getAllKeyPropertiesNames().iterator();
    		while (itKeyProperties.hasNext()) {
    			String keyProperty = (String) itKeyProperties.next();
    			if (modelMapping.isReferencePropertyOverlappingWithSomeProperty(keyProperty)) continue;
    			String propertyName = Strings.change(Strings.firstUpper(keyProperty), ".", "_");
    			if (modelMapping.hasConverter(keyProperty) || keyProperty.indexOf('.') >= 0) { 
    		
    out.print("  \n\t\tset_");
    out.print(propertyName);
    out.print("(data.get_");
    out.print(propertyName);
    out.print("());");
    			
    			}
    			else {
    		
    out.print(" \n\t\tset");
    out.print(propertyName);
    out.print("(data.get");
    out.print(propertyName);
    out.print("());");
    
    			} 
    		  } 
    		} // else if has aggregate
    		properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();					
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\ttry {");
    
    		}
    		itDefaultValueProperties = properties.iterator(); 
    		while (itDefaultValueProperties.hasNext()) {
    			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();
    			String propertyName = Strings.firstUpper(property.getName());
    			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
    			String calculatorClass = calculator.getClassName();
    		
    out.print(" \t\n\t\t\t");
    out.print(calculatorClass);
    out.print(" ");
    out.print(property.getName());
    out.print("Calculator= (");
    out.print(calculatorClass);
    out.print(")\n\t\t\t\tgetMetaModel().getMetaProperty(\"");
    out.print(property.getName());
    out.print("\").getMetaCalculatorDefaultValue().getCalculator();");
    
    			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
    			while (itSets.hasNext()) {
    				MetaSet set = (MetaSet) itSets.next();
    				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
    				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
    		
    out.print(" \t\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.set");
    out.print(propertyNameInCalculator);
    out.print("(get");
    out.print(propertyNameFrom);
    out.print("());");
    	} // poners 
    		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setContainerKey(containerKey);\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setCounter(counter);");
    	
    		}
    		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setConnectionProvider(getPortableContext());");
    		
    		}
    		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setEntity(this);");
     				
    		}		
    		String calculateValueSentence = property.getName() + "Calculator.calculate()";		
    		
    out.print(" \n\t\t\tset");
    out.print(propertyName);
    out.print("(");
    out.print(Generators.generateCast(property.getTypeName(), calculateValueSentence));
    out.print(");");
    } //properties 				
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"entity_create_error\", \"");
    out.print(name);
    out.print("\", ex.getLocalizedMessage()));\n\t\t}");
    } // if 
    out.print(" \n\t\t\t\n\t\treturn null;\n\t}");
    if (aggregateName == null) { 
    out.print(" \n\tpublic void ejbPostCreate(");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Data data)");
    } else { 
    out.print(" \n\tpublic void ejbPostCreate(");
    out.print(containerClass);
    out.print(" container, int counter, ");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Data data)");
    } 
    out.print(" \n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {");
    PostcreatePG.generate(context, out, metaModel); 
    out.print("\t\t\t\n\t}\n\t\n\t\n\t/**\n\t * @ejb:create-method\n\t */");
    if (aggregateName == null) { 
    out.print("\t \n\tpublic ");
    out.print(keyClass);
    out.print(" ejbCreate(");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Value value)");
    } else { 	
    out.print(" \n\tpublic ");
    out.print(keyClass);
    out.print(" ejbCreate(");
    out.print(containerClass);
    out.print(" container, int counter, ");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Value value)");
    } 
    out.print(" \n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {\n\t\tinitMembers();\t\n\t\tcreating = true;\t\n\t\tmodified = false;\n\t\tset");
    out.print(name);
    out.print("Value(value);");
    
    		Iterator itKeyProperties = metaModel.getAllKeyPropertiesNames().iterator();
    		while (itKeyProperties.hasNext()) {
    			String propertyName = (String) itKeyProperties.next();
    			propertyName = Strings.firstUpper(Strings.change(propertyName, ".", "_"));
    		
    out.print(" \n\t\tset");
    out.print(propertyName);
    out.print("(value.get");
    out.print(propertyName);
    out.print("());");
    } 
    if (aggregateName != null) { 
    out.print(" \n\t\t");
    out.print(containerKeyClass);
    out.print(" containerKey = null;\n\t\ttry {\n\t\t\tcontainerKey = (");
    out.print(containerKeyClass);
    out.print(") container.getPrimaryKey();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"obtain_primary_key_error_on_create\", \"");
    out.print(componentName);
    out.print("\", \"");
    out.print(aggregateName);
    out.print("\"));\n\t\t}");
    
    		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
    		while (it.hasNext()) {
    			String propertyName = (String) it.next();
    			String propertyNameInKey = propertyName;
    			if (propertyName.indexOf('.') >= 0) {
    				propertyName = Strings.change(propertyName, ".", "_");
    				propertyNameInKey = "_" + Strings.firstUpper(propertyName);
    			}
    		
    out.print(" \n\t\tset");
    out.print(containerName);
    out.print("_");
    out.print(propertyName);
    out.print("(containerKey.");
    out.print(propertyNameInKey);
    out.print(");");
    } 
    } // if has aggregate
    		properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();					
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\ttry {");
    
    		}
    		itDefaultValueProperties = properties.iterator(); 
    		while (itDefaultValueProperties.hasNext()) {
    			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();
    			String propertyName = Strings.firstUpper(property.getName());
    			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
    			String calculatorClass = calculator.getClassName();
    		
    out.print(" \t\n\t\t\t");
    out.print(calculatorClass);
    out.print(" ");
    out.print(property.getName());
    out.print("Calculator = (");
    out.print(calculatorClass);
    out.print(")\n\t\t\t\tgetMetaModel().getMetaProperty(\"");
    out.print(property.getName());
    out.print("\").getMetaCalculatorDefaultValue().getCalculator();");
    
    			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
    			while (itSets.hasNext()) {
    				MetaSet set = (MetaSet) itSets.next();
    				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
    				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
    		
    out.print(" \t\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.set");
    out.print(propertyNameInCalculator);
    out.print("(get");
    out.print(propertyNameFrom);
    out.print("());");
    	} // sets 
    		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setContainerKey(containerKey);\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setCounter(counter);");
    	
    		}
    		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setConnectionProvider(getPortableContext());");
    		
    		}
    		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setEntity(this);");
     				
    		}
    		String calculateValueSentence = property.getName() + "Calculator.calculate()";		
    		
    out.print(" \n\t\t\tset");
    out.print(propertyName);
    out.print("(");
    out.print(Generators.generateCast(property.getTypeName(), calculateValueSentence));
    out.print(");");
    } //property
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"entity_create_error\", \"");
    out.print(name);
    out.print("\", ex.getLocalizedMessage()));\n\t\t}");
    } // if 
    out.print(" \n\t\t\t\n\t\treturn null;\n\t}");
    if (aggregateName == null) { 
    out.print(" \n\tpublic void ejbPostCreate(");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Value value)");
    } else { 
    out.print(" \n\tpublic void ejbPostCreate(");
    out.print(containerClass);
    out.print(" container, int counter, ");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Value value)");
    } 
    out.print(" \n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {");
    PostcreatePG.generate(context, out, metaModel); 
    out.print("\t\t\t\n\t}");
    if (aggregateName != null) { 
    out.print("\t \n\t/**\n\t * @ejb:create-method\n\t */\n\tpublic ");
    out.print(keyClass);
    out.print(" ejbCreate(");
    out.print(containerKeyClass);
    out.print(" containerKey, int counter, ");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Value value)\n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {\n\t\tinitMembers();\t\n\t\tcreating = true;\n\t\tmodified = false;\n\t\tset");
    out.print(name);
    out.print("Value(value);");
    
    		itKeyProperties = metaModel.getAllKeyPropertiesNames().iterator();
    		while (itKeyProperties.hasNext()) {
    			String propertyName = Strings.change(Strings.firstUpper((String) itKeyProperties.next()), ".", "_");						
    		
    out.print(" \n\t\tset");
    out.print(propertyName);
    out.print("(value.get");
    out.print(propertyName);
    out.print("());");
    
    		} 
    		
    		Iterator it = containerModel.getAllKeyPropertiesNames().iterator();
    		while (it.hasNext()) {
    			String propertyName = (String) it.next();
    			String propertyNameInKey = propertyName;
    			if (propertyName.indexOf('.') >= 0) {
    				propertyName = Strings.change(propertyName, ".", "_");
    				propertyNameInKey = "_" + Strings.firstUpper(propertyName);
    			}
    		
    out.print("\n\t\tset");
    out.print(containerName);
    out.print("_");
    out.print(propertyName);
    out.print("(containerKey.");
    out.print(propertyNameInKey);
    out.print(");");
    } 
    		properties = metaModel.getMetaPropertiesWithDefaultValueOnCreate();
    		if (!properties.isEmpty()) {
    		
    out.print(" \n\t\ttry {");
    
    		}
    		itDefaultValueProperties = properties.iterator();
    		while (itDefaultValueProperties.hasNext()) {
    			MetaProperty property = (MetaProperty) itDefaultValueProperties.next();
    			String propertyName = Strings.firstUpper(property.getName());
    			MetaCalculator calculator = property.getMetaCalculatorDefaultValue();
    			String calculatorClass = calculator.getClassName();
    		
    out.print(" \n\t\t\t");
    out.print(calculatorClass);
    out.print(" ");
    out.print(property.getName());
    out.print("Calculator= (");
    out.print(calculatorClass);
    out.print(")\n\t\t\t\tgetMetaModel().getMetaProperty(\"");
    out.print(property.getName());
    out.print("\").getMetaCalculatorDefaultValue().getCalculator();");
    
    			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
    			while (itSets.hasNext()) {
    				MetaSet set = (MetaSet) itSets.next();
    				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
    				String propertyNameFrom = Strings.firstUpper(set.getPropertyNameFrom());
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.set");
    out.print(propertyNameInCalculator);
    out.print("(get");
    out.print(propertyNameFrom);
    out.print("());");
    	} // sets
    		if (IAggregateOidCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setContainerKey(containerKey);\n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setCounter(counter);");
    
    		}
    		else if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) {
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setConnectionProvider(getPortableContext());");
    
    		}
    		else if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    		
    out.print(" \n\t\t\t");
    out.print(property.getName());
    out.print("Calculator.setEntity(this);");
     				
    		}
    		
    		String calculateValueSentence = property.getName() + "Calculator.calculate()";
    		
    out.print(" \n\t\t\tset");
    out.print(propertyName);
    out.print("(");
    out.print(Generators.generateCast(property.getTypeName(), calculateValueSentence));
    out.print(");");
    } // properties
    		
    		if (!properties.isEmpty()) {
    		
    out.print("\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"entity_create_error\", \"");
    out.print(name);
    out.print("\", ex.getLocalizedMessage()));\n\t\t}");
    } // if 
    out.print(" \n\t\treturn null;\t\t\t\t\t\n\n\t}");
    } 
    if (aggregateName != null) { 
    out.print(" \n\tpublic void ejbPostCreate(");
    out.print(containerKeyClass);
    out.print(" containerKey, int counter, ");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Value value)\t\n\t\tthrows\n\t\t\tCreateException,\n\t\t\tValidationException {");
    PostcreatePG.generate(context, out, metaModel); 
    out.print("\t\t\t\n\t}");
    } 
    out.print("\n\t\n\tpublic void ejbLoad() {\n\t\tcreating = false;\n\t\tmodified = false;\n\t}\n\t\n\tpublic void ejbStore() {\n\t\tif (creating) {\n\t\t\tcreating = false;\n\t\t\treturn;\n\t\t}\n\t\tif (!modified) return;");
    PostmodifyPG.generate(context, out, metaModel); 
    out.print("\t\t\t\n\t\t\n\t\tmodified = false;\n\t} \t\n\t\n\t// Properties/Propiedades");
    
    Iterator itProperties = metaModel.getMetaProperties().iterator();	
    while (itProperties.hasNext()) {	
    	MetaProperty property = (MetaProperty) itProperties.next();
    	PropertyPG.generateEJB(context, out, property); 
    }
    
    out.print(" \n\n\t// Colecciones/Collections");
    
    Iterator itCollections = metaModel.getMetaCollections().iterator();	
    while (itCollections.hasNext()) {	
    	MetaCollection collection = (MetaCollection) itCollections.next();
    	String collectionName = Strings.firstUpper(collection.getName());
    	MetaReference reference = collection.getMetaReference();	
    	IMetaEjb referencedModel = (IMetaEjb) reference.getMetaModelReferenced();
    	String homeClass = referencedModel.getHome();
    	String referencedModelName = reference.getReferencedModelName();
    	String referencedModelClass = referencedModel.getRemote();
    	String referencedModelInterface = referencedModel.getInterfaceName();
    	String referencedJNDI = referencedModel.getJndi();
    	String homeAttribute = Strings.firstLower(collectionName) + "Home";
    	String getHome = "get" + Strings.firstUpper(homeAttribute);
    	String role = Strings.firstUpper(reference.getRole());
    	String finderName = collection.hasCondition()?collection.getFinderName():"By" + role;
    	String finderArguments = collection.hasCondition()?generateFinderArguments(collection.getMetaPropertiesFinderArguments()):generateFinderArgumentsByKey(metaModel);		
    
    out.print("\t\n\n\tprivate ");
    out.print(homeClass);
    out.print(" ");
    out.print(homeAttribute);
    out.print(";");
    if (!reference.isAggregate() && 
    	!collection.hasCondition() && 
    	!collection.hasCalculator() && 
    	!reference.getMetaModelReferenced().getMetaReference(reference.getRole()).isKey()) { 
    out.print("\n\t/**\n\t * @ejb:interface-method\n\t */\n\tpublic void addTo");
    out.print(collectionName);
    out.print("(");
    out.print(referencedModelInterface);
    out.print(" newElement) {\n\t\tif (newElement != null) { \n\t\t\ttry {\n\t\t\t\t((");
    out.print(referencedModelClass);
    out.print(") newElement).set");
    out.print(role);
    out.print("Key((");
    out.print(keyClass);
    out.print(") getEntityContext().getPrimaryKey());\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t\tthrow new EJBException(XavaResources.getString(\"add_collection_element_error\", \"");
    out.print(referencedModelName);
    out.print("\", \"");
    out.print(name);
    out.print("\"));\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * @ejb:interface-method\n\t */\n\tpublic void removeFrom");
    out.print(collectionName);
    out.print("(");
    out.print(referencedModelInterface);
    out.print(" toRemove) {\n\t\tif (toRemove != null) {\n\t\t\ttry {\n\t\t\t\t((");
    out.print(referencedModelClass);
    out.print(") toRemove).set");
    out.print(role);
    out.print("Key(null);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t\tthrow new EJBException(XavaResources.getString(\"remove_collection_element_error\", \"");
    out.print(referencedModelName);
    out.print("\", \"");
    out.print(name);
    out.print("\"));\n\t\t\t}\n\t\t}\n\t}");
    } // if aggregate 
    if (collection.hasCalculator()) { 
    out.print("\n\n\t/**\n\t * @ejb:interface-method\n\t */\n\tpublic java.util.Collection get");
    out.print(collectionName);
    out.print("() {\t\t\n\t\ttry {");
    
    			MetaCalculator calculator = collection.getMetaCalculator();
    			String calculatorClass = calculator.getClassName();
    			
    out.print(" \t\t\n\t\t\t");
    out.print(calculatorClass);
    out.print(" ");
    out.print(collection.getName());
    out.print("Calculator= (");
    out.print(calculatorClass);
    out.print(")\n\t\t\t\tgetMetaModel().getMetaCollection(\"");
    out.print(collection.getName());
    out.print("\").getMetaCalculator().getCalculator();");
    	
    			Iterator itSets = calculator.getMetaSetsWithoutValue().iterator();
    			while (itSets.hasNext()) {
    				MetaSet set = (MetaSet) itSets.next();
    				String propertyNameInCalculator = Strings.firstUpper(set.getPropertyName());
    				String propertyNameFrom = set.getPropertyNameFrom();
    				MetaProperty p = metaModel.getMetaProperty(propertyNameFrom);				
    				if (propertyNameFrom.indexOf('.') >= 0) {
    					if (p.isKey() || p.getMetaModel() instanceof MetaAggregate) {
    						propertyNameFrom = Strings.firstUpper(Strings.change(propertyNameFrom, ".", "_"));
    					}
    					else {
    						StringTokenizer st = new StringTokenizer(propertyNameFrom, ".");
    						String ref = st.nextToken();
    						String pro = st.nextToken();
    						propertyNameFrom = Strings.firstUpper(ref) + "().get" + Strings.firstUpper(pro);
    					}
    				}
    				else {
    					propertyNameFrom = Strings.firstUpper(propertyNameFrom);
    				}
    				String getPropertyFrom = "boolean".equals(p.getTypeName())?"is":"get";
    				String value = set.getValue();
    				if (set.hasValue()) {
    			
    out.print(" \n\t\t\t");
    out.print(collection.getName());
    out.print("Calculator.set");
    out.print(propertyNameInCalculator);
    out.print("(\"");
    out.print(value);
    out.print("\");");
    
    				} else {	
    			
    out.print("  \t\n\t\t\t");
    out.print(collection.getName());
    out.print("Calculator.set");
    out.print(propertyNameInCalculator);
    out.print("(");
    out.print(getPropertyFrom);
    out.print(propertyNameFrom);
    out.print("());");
    	}} // else/sets 	 
    			if (IEntityCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    			
    out.print(" \n\t\t\t\t");
    out.print(collection.getName());
    out.print("Calculator.setEntity(this);");
    } 
    			if (IJDBCCalculator.class.isAssignableFrom(Class.forName(calculatorClass))) { 
    			
    out.print(" \n\t\t\t\t");
    out.print(collection.getName());
    out.print("Calculator.setConnectionProvider(getPortableContext());");
    			
    			}  
    			String calculateValueSentence = collection.getName() + "Calculator.calculate()";		
    			
    out.print(" \n\t\t\treturn ");
    out.print(Generators.generateCast("java.util.Collection", calculateValueSentence));
    out.print(";\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"generator.calculate_value_error\", \"");
    out.print(collection.getName());
    out.print("\", \"");
    out.print(metaModel.getName());
    out.print("\", ex.getLocalizedMessage()));\n\t\t}\n\t}");
    } else { 
    out.print(" \n\n\t/**\n\t * @ejb:interface-method\n\t */\n\tpublic java.util.Collection get");
    out.print(collectionName);
    out.print("() {\t\t\n\t\ttry {\n\t\t\treturn ");
    out.print(getHome);
    out.print("().find");
    out.print(finderName);
    out.print("(");
    out.print(finderArguments);
    out.print(");\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tthrow new EJBException(XavaResources.getString(\"get_collection_elements_error\", \"");
    out.print(collectionName);
    out.print("\", \"");
    out.print(name);
    out.print("\"));\n\t\t}\n\t}\n\t\t\n\tprivate ");
    out.print(homeClass);
    out.print(" ");
    out.print(getHome);
    out.print("() throws Exception{\n\t\tif (");
    out.print(homeAttribute);
    out.print(" == null) {\n\t\t\t");
    out.print(homeAttribute);
    out.print(" = (");
    out.print(homeClass);
    out.print(") PortableRemoteObject.narrow(\n\t\t\t \t\tBeansContext.get().lookup(\"");
    out.print(referencedJNDI);
    out.print("\"),\n\t\t\t \t\t");
    out.print(homeClass);
    out.print(".class);\t\t\t \t\t\n\t\t}\n\t\treturn ");
    out.print(homeAttribute);
    out.print(";\n\t}");
    } // collection.hasCalculator 
    } // collections 
    out.print("\t\t\n\n\t// References/Referencias");
    
    Iterator itReferences = metaModel.getMetaReferences().iterator();	
    while (itReferences.hasNext()) {	
    	MetaReference reference = (MetaReference) itReferences.next();
    	String referenceName = Strings.firstUpper(reference.getName());	
    	if (reference.getMetaModelReferenced() instanceof MetaAggregateBean) {	
    		AggregateReferencePG.generateEJB(context, out, reference);
    	} 
    	else { // reference to entity or aggreate implemented as EJB
    		EntityReferenceEJBPG.generate(context, out, reference);
    	}
    } 
    
    	
    	MethodsPG.generateEJB(context, out, metaModel); 
    
    out.print(" \n\n\tprivate MetaModel metaModel;\n\tprivate MetaModel getMetaModel() throws XavaException {\n\t\tif (metaModel == null) {");
    if (aggregateName == null) { 
    out.print("\n\t\t\tmetaModel = MetaComponent.get(\"");
    out.print(componentName);
    out.print("\").getMetaEntity();");
    } else { 
    out.print(" \n\t\t\tmetaModel = MetaComponent.get(\"");
    out.print(componentName);
    out.print("\").getMetaAggregate(\"");
    out.print(aggregateName);
    out.print("\");");
    } 
    out.print(" \t\n\t\t}\n\t\treturn metaModel;\n\t}\n\t\n\t\n\t/**\n\t * @ejb:interface-method\n\t */\t\n\tpublic abstract ");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Data getData();\t\t\n\t\n\t/**\n\t * @ejb:interface-method\n\t */\t\t\n\tpublic abstract void setData(");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Data data);\n\t\n\t/**\n\t * @ejb:interface-method\n\t */\t\n\tpublic abstract ");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Value get");
    out.print(name);
    out.print("Value();\t\t\n\t\n\t/**\n\t * @ejb:interface-method\n\t */\t\t\n\tpublic abstract void set");
    out.print(name);
    out.print("Value(");
    out.print(packageName);
    out.print(".");
    out.print(name);
    out.print("Value value);\n\t\n\tpublic void setEntityContext(javax.ejb.EntityContext ctx) {\n\t\tsuper.setEntityContext(ctx);\n\t}\n\tpublic void unsetEntityContext() {\n\t\tsuper.unsetEntityContext();\n\t}\n\t\n\tprivate void initMembers() {");
    
    		Iterator itPropertiesToInit = metaModel.getMetaPropertiesPersistents().iterator();
    		while (itPropertiesToInit.hasNext()) {
    			MetaProperty p = (MetaProperty) itPropertiesToInit.next();
    			String propertyName = Strings.firstUpper(p.getName());
    			if (!p.getType().isPrimitive()) {				
    		
    out.print(" \n\t\tset");
    out.print(propertyName);
    out.print("(null);");
    
    			}
    			else if (p.isNumber()) {
    		
    out.print(" \n\t\tset");
    out.print(propertyName);
    out.print("(0);");
    	
    			}
    			else if (p.getType().getName().equals("boolean")) {
    		
    out.print(" \n\t\tset");
    out.print(propertyName);
    out.print("(false);");
    
    			}
    		}
    		
    
    		for (Iterator it = metaModel.getMetaReferencesWithMapping().iterator(); it.hasNext(); ) {
    			MetaReference ref = (MetaReference) it.next();
    			String refName = Strings.firstUpper(ref.getName());
    		
    out.print(" \n\t\tset");
    out.print(refName);
    out.print("Key(null);");
    
    		}
    		
    out.print(" \t\n\t}\n\t\t\n}");
    
        } catch (Exception e) {
            System.out.println("Exception: "+e.getMessage());
            e.printStackTrace();
            return false;
        }
        return true;
    }
    
    /**
     * A program generator is typically (but not always) invoked
     * with a command line with arguments for the XML input file
     * and output file.
     */    
    public static void main(String[] args) {
        try {
            ProgramWriter out = args.length>=2
                ?new ProgramWriter(new FileOutputStream(args[1]))
                :new ProgramWriter(System.out);
            EJBeanPG pg = new EJBeanPG();
            for (int j=1; j<=args.length; ++j) {
                pg.properties.put("arg"+j, args[j-1]);
            }
            pg.generate(new XPathContext(args[0]), out);
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * This array provides program generator development history
     */
    public String[][] history = {
        { "Thu Nov 17 18:41:54 CET 2005", // date this file was generated
             "/home/javi/workspace/OpenXava/generator/ejbean.xml", // input file
             "/home/javi/workspace/OpenXava/generator/EJBeanPG.java" }, // output file
        {"Mon Apr 09 16:45:30 EDT 2001", "TL2Java.xml", "TL2Java.java", }, 
        {"Mon Apr 09 16:39:37 EDT 2001", "TL2Java.xml", "TL2Java.java", }, 
        {"Mon Apr 09 16:37:21 EDT 2001", "TL2Java.xml", "TL2Java.java", }, 
        {"Fri Feb 09 14:49:11 EST 2001", "TL2Java.xml", "TL2Java.java", }, 
        {"Fri Feb 09 14:30:24 EST 2001", "TL2Java.xml", "TL2Java.java", }, 
        {"Fri Feb 09 11:13:01 EST 2001", "TL2Java.xml", "TL2Java.java", }, 
        {"Fri Feb 09 10:57:04 EST 2001", "TL2Java.xml", "TL2Java.java", }, 
        {"Wed Apr 26 11:15:41 EDT 2000", "..\\input\\TL2Java.xml", "TL2Java1.java", }, 
        {"April 2000", "hand coded", "TL2Java1.java", }, 

    };
}